
gsm_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004190  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b0  080046b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080046b0  080046b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046b0  080046b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  08004728  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004728  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdf7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f05  00000000  00000000  0002be90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  0002dd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002e988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014fe2  00000000  00000000  0002f478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7a7  00000000  00000000  0004445a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000720e8  00000000  00000000  0004fc01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1ce9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a4  00000000  00000000  000c1d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004284 	.word	0x08004284

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004284 	.word	0x08004284

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b2d      	ldr	r3, [pc, #180]	; (8000228 <MX_GPIO_Init+0xcc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2c      	ldr	r2, [pc, #176]	; (8000228 <MX_GPIO_Init+0xcc>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2a      	ldr	r3, [pc, #168]	; (8000228 <MX_GPIO_Init+0xcc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b27      	ldr	r3, [pc, #156]	; (8000228 <MX_GPIO_Init+0xcc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a26      	ldr	r2, [pc, #152]	; (8000228 <MX_GPIO_Init+0xcc>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b24      	ldr	r3, [pc, #144]	; (8000228 <MX_GPIO_Init+0xcc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b21      	ldr	r3, [pc, #132]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a20      	ldr	r2, [pc, #128]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a1a      	ldr	r2, [pc, #104]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b18      	ldr	r3, [pc, #96]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4815      	ldr	r0, [pc, #84]	; (800022c <MX_GPIO_Init+0xd0>)
 80001d8:	f001 fcfe 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	2180      	movs	r1, #128	; 0x80
 80001e0:	4813      	ldr	r0, [pc, #76]	; (8000230 <MX_GPIO_Init+0xd4>)
 80001e2:	f001 fcf9 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	480b      	ldr	r0, [pc, #44]	; (800022c <MX_GPIO_Init+0xd0>)
 8000200:	f001 fab0 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8000204:	2380      	movs	r3, #128	; 0x80
 8000206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000208:	2301      	movs	r3, #1
 800020a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020c:	2300      	movs	r3, #0
 800020e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000210:	2302      	movs	r3, #2
 8000212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4619      	mov	r1, r3
 800021a:	4805      	ldr	r0, [pc, #20]	; (8000230 <MX_GPIO_Init+0xd4>)
 800021c:	f001 faa2 	bl	8001764 <HAL_GPIO_Init>

}
 8000220:	bf00      	nop
 8000222:	3720      	adds	r7, #32
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000
 800022c:	40011000 	.word	0x40011000
 8000230:	40010c00 	.word	0x40010c00

08000234 <replac_string>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

///////////////////////// Функция для замены смволов \r и \n на пробелы ////////////////////////////
void replac_string(char *src)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	if(!src) return;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d013      	beq.n	800026a <replac_string+0x36>

	for(;*src; src++)
 8000242:	e00d      	b.n	8000260 <replac_string+0x2c>
	{
		if(*src == '\n' || *src == '\r') *src = ' ';
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b0a      	cmp	r3, #10
 800024a:	d003      	beq.n	8000254 <replac_string+0x20>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b0d      	cmp	r3, #13
 8000252:	d102      	bne.n	800025a <replac_string+0x26>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2220      	movs	r2, #32
 8000258:	701a      	strb	r2, [r3, #0]
	for(;*src; src++)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1ed      	bne.n	8000244 <replac_string+0x10>
 8000268:	e000      	b.n	800026c <replac_string+0x38>
	if(!src) return;
 800026a:	bf00      	nop
	}
}
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <set_comand>:

///////////////////////// Функция для отправки настроечных команд, в цикле лучше не использовать ////////////////////////////
void set_comand(char *buff)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b0ae      	sub	sp, #184	; 0xb8
 8000278:	af02      	add	r7, sp, #8
 800027a:	6078      	str	r0, [r7, #4]
	uint8_t count_err = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	char str[SEND_STR_SIZE] = {0,};
 8000282:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000286:	2240      	movs	r2, #64	; 0x40
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fba4 	bl	80039d8 <memset>
	snprintf(str, SEND_STR_SIZE, "%s\r\n", buff);
 8000290:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a89      	ldr	r2, [pc, #548]	; (80004bc <set_comand+0x248>)
 8000298:	2140      	movs	r1, #64	; 0x40
 800029a:	f003 fba5 	bl	80039e8 <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 800029e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ff52 	bl	800014c <strlen>
 80002a8:	4603      	mov	r3, r0
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80002b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b4:	4882      	ldr	r0, [pc, #520]	; (80004c0 <set_comand+0x24c>)
 80002b6:	f003 f969 	bl	800358c <HAL_UART_Transmit>
	HAL_Delay(200);
 80002ba:	20c8      	movs	r0, #200	; 0xc8
 80002bc:	f001 f8f4 	bl	80014a8 <HAL_Delay>

	memset(str, 0, SEND_STR_SIZE);
 80002c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002c4:	2240      	movs	r2, #64	; 0x40
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fb85 	bl	80039d8 <memset>

	for(uint8_t i = 0; i < 30; i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80002d4:	e0c9      	b.n	800046a <set_comand+0x1f6>
	{
		if(gsm_available()) //если модуль что-то прислал
 80002d6:	f000 ffdb 	bl	8001290 <gsm_available>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	f000 80bb 	beq.w	8000458 <set_comand+0x1e4>
		{
			uint16_t i = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

			while(gsm_available())
 80002e8:	e015      	b.n	8000316 <set_comand+0xa2>
			{
				str[i++] = gsm_read();
 80002ea:	f000 ffe7 	bl	80012bc <gsm_read>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4619      	mov	r1, r3
 80002f2:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	f8a7 20ac 	strh.w	r2, [r7, #172]	; 0xac
 80002fc:	b2ca      	uxtb	r2, r1
 80002fe:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000302:	440b      	add	r3, r1
 8000304:	f803 2c48 	strb.w	r2, [r3, #-72]
				if(i > SEND_STR_SIZE - 1) break;
 8000308:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800030c:	2b3f      	cmp	r3, #63	; 0x3f
 800030e:	d808      	bhi.n	8000322 <set_comand+0xae>
				HAL_Delay(1);
 8000310:	2001      	movs	r0, #1
 8000312:	f001 f8c9 	bl	80014a8 <HAL_Delay>
			while(gsm_available())
 8000316:	f000 ffbb 	bl	8001290 <gsm_available>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1e4      	bne.n	80002ea <set_comand+0x76>
 8000320:	e000      	b.n	8000324 <set_comand+0xb0>
				if(i > SEND_STR_SIZE - 1) break;
 8000322:	bf00      	nop
			}

			replac_string(str);
 8000324:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff83 	bl	8000234 <replac_string>

			char *p = NULL;
 800032e:	2300      	movs	r3, #0
 8000330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			if((p = strstr(str, "+CPAS:")) != NULL)
 8000334:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000338:	4962      	ldr	r1, [pc, #392]	; (80004c4 <set_comand+0x250>)
 800033a:	4618      	mov	r0, r3
 800033c:	f003 fb95 	bl	8003a6a <strstr>
 8000340:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8000344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000348:	2b00      	cmp	r3, #0
 800034a:	d02a      	beq.n	80003a2 <set_comand+0x12e>
			{
				if(strstr(str, "0") == NULL)
 800034c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000350:	2130      	movs	r1, #48	; 0x30
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fb7c 	bl	8003a50 <strchr>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d158      	bne.n	8000410 <set_comand+0x19c>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 800035e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000362:	f7ff fef3 	bl	800014c <strlen>
 8000366:	4603      	mov	r3, r0
 8000368:	b29a      	uxth	r2, r3
 800036a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000372:	4855      	ldr	r0, [pc, #340]	; (80004c8 <set_comand+0x254>)
 8000374:	f003 f90a 	bl	800358c <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CPAS not ready, must be '0'\n", strlen("\n+CPAS not ready, must be '0'\n"), 1000);
 8000378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037c:	221e      	movs	r2, #30
 800037e:	4953      	ldr	r1, [pc, #332]	; (80004cc <set_comand+0x258>)
 8000380:	4851      	ldr	r0, [pc, #324]	; (80004c8 <set_comand+0x254>)
 8000382:	f003 f903 	bl	800358c <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
 8000386:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800038a:	3301      	adds	r3, #1
 800038c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000394:	484e      	ldr	r0, [pc, #312]	; (80004d0 <set_comand+0x25c>)
 8000396:	f001 fc51 	bl	8001c3c <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 800039a:	2064      	movs	r0, #100	; 0x64
 800039c:	f001 f884 	bl	80014a8 <HAL_Delay>
						count_err++;
 80003a0:	e7f1      	b.n	8000386 <set_comand+0x112>
						//if(count_err > 49) HAL_NVIC_SystemReset();
					}
				}
			}
			else if((p = strstr(str, "+CREG:")) != NULL)
 80003a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80003a6:	494b      	ldr	r1, [pc, #300]	; (80004d4 <set_comand+0x260>)
 80003a8:	4618      	mov	r0, r3
 80003aa:	f003 fb5e 	bl	8003a6a <strstr>
 80003ae:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80003b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d02a      	beq.n	8000410 <set_comand+0x19c>
			{
				if(strstr(str, "0,1") == NULL)
 80003ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80003be:	4946      	ldr	r1, [pc, #280]	; (80004d8 <set_comand+0x264>)
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 fb52 	bl	8003a6a <strstr>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d121      	bne.n	8000410 <set_comand+0x19c>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 80003cc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80003d0:	f7ff febc 	bl	800014c <strlen>
 80003d4:	4603      	mov	r3, r0
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003dc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80003e0:	4839      	ldr	r0, [pc, #228]	; (80004c8 <set_comand+0x254>)
 80003e2:	f003 f8d3 	bl	800358c <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CREG not ready, must be '0,1'\n", strlen("\n+CREG not ready, must be '0,1'\n"), 1000);
 80003e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ea:	2220      	movs	r2, #32
 80003ec:	493b      	ldr	r1, [pc, #236]	; (80004dc <set_comand+0x268>)
 80003ee:	4836      	ldr	r0, [pc, #216]	; (80004c8 <set_comand+0x254>)
 80003f0:	f003 f8cc 	bl	800358c <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
 80003f4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80003f8:	3301      	adds	r3, #1
 80003fa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000402:	4833      	ldr	r0, [pc, #204]	; (80004d0 <set_comand+0x25c>)
 8000404:	f001 fc1a 	bl	8001c3c <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8000408:	2064      	movs	r0, #100	; 0x64
 800040a:	f001 f84d 	bl	80014a8 <HAL_Delay>
						count_err++;
 800040e:	e7f1      	b.n	80003f4 <set_comand+0x180>
					}
				}
			}


			p = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			char dbg_str[SEND_STR_SIZE + 32] = {0,};
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	2260      	movs	r2, #96	; 0x60
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f003 fada 	bl	80039d8 <memset>
			snprintf(dbg_str, SEND_STR_SIZE + 32, "Set %s %s\n", buff, str);
 8000424:	f107 0008 	add.w	r0, r7, #8
 8000428:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a2b      	ldr	r2, [pc, #172]	; (80004e0 <set_comand+0x26c>)
 8000432:	2160      	movs	r1, #96	; 0x60
 8000434:	f003 fad8 	bl	80039e8 <sniprintf>
			HAL_UART_Transmit(DEBUG, (uint8_t*)dbg_str, strlen(dbg_str), 1000);
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe85 	bl	800014c <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	b29a      	uxth	r2, r3
 8000446:	f107 0108 	add.w	r1, r7, #8
 800044a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044e:	481e      	ldr	r0, [pc, #120]	; (80004c8 <set_comand+0x254>)
 8000450:	f003 f89c 	bl	800358c <HAL_UART_Transmit>

			return;
 8000454:	bf00      	nop
 8000456:	e02d      	b.n	80004b4 <set_comand+0x240>
		}

		HAL_Delay(500);
 8000458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800045c:	f001 f824 	bl	80014a8 <HAL_Delay>
	for(uint8_t i = 0; i < 30; i++)
 8000460:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000464:	3301      	adds	r3, #1
 8000466:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800046a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800046e:	2b1d      	cmp	r3, #29
 8000470:	f67f af31 	bls.w	80002d6 <set_comand+0x62>

	} // END for()

	HAL_UART_Transmit(DEBUG, (uint8_t*)"Not reply ", strlen("Not reply "), 1000);
 8000474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000478:	220a      	movs	r2, #10
 800047a:	491a      	ldr	r1, [pc, #104]	; (80004e4 <set_comand+0x270>)
 800047c:	4812      	ldr	r0, [pc, #72]	; (80004c8 <set_comand+0x254>)
 800047e:	f003 f885 	bl	800358c <HAL_UART_Transmit>
	HAL_UART_Transmit(DEBUG, (uint8_t*)buff, strlen(buff), 1000);
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff fe62 	bl	800014c <strlen>
 8000488:	4603      	mov	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000490:	6879      	ldr	r1, [r7, #4]
 8000492:	480d      	ldr	r0, [pc, #52]	; (80004c8 <set_comand+0x254>)
 8000494:	f003 f87a 	bl	800358c <HAL_UART_Transmit>

	while(1) // мигаем 5 секунд и ресетим плату
	{
		count_err++;
 8000498:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800049c:	3301      	adds	r3, #1
 800049e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a6:	480a      	ldr	r0, [pc, #40]	; (80004d0 <set_comand+0x25c>)
 80004a8:	f001 fbc8 	bl	8001c3c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004ac:	2064      	movs	r0, #100	; 0x64
 80004ae:	f000 fffb 	bl	80014a8 <HAL_Delay>
		count_err++;
 80004b2:	e7f1      	b.n	8000498 <set_comand+0x224>
		//if(count_err > 49) HAL_NVIC_SystemReset();
	}
}
 80004b4:	37b0      	adds	r7, #176	; 0xb0
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	0800429c 	.word	0x0800429c
 80004c0:	200001a4 	.word	0x200001a4
 80004c4:	080042a4 	.word	0x080042a4
 80004c8:	20000164 	.word	0x20000164
 80004cc:	080042ac 	.word	0x080042ac
 80004d0:	40011000 	.word	0x40011000
 80004d4:	080042cc 	.word	0x080042cc
 80004d8:	080042d4 	.word	0x080042d4
 80004dc:	080042d8 	.word	0x080042d8
 80004e0:	080042fc 	.word	0x080042fc
 80004e4:	08004308 	.word	0x08004308

080004e8 <balance>:

/////////////////////// Функции для использования в цикле //////////////////////////
void balance(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	char ATD[] = "ATD#100#;\r\n"; // баланс (бабло)
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <balance+0x30>)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe26 	bl	800014c <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	1d39      	adds	r1, r7, #4
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <balance+0x34>)
 800050c:	f003 f83e 	bl	800358c <HAL_UART_Transmit>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08004314 	.word	0x08004314
 800051c:	200001a4 	.word	0x200001a4

08000520 <disable_connection>:

void disable_connection(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	char ATH[] = "ATH\r\n"; // сбросить все соединения
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <disable_connection+0x34>)
 8000528:	463b      	mov	r3, r7
 800052a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052e:	6018      	str	r0, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATH, strlen(ATH), 1000);
 8000534:	463b      	mov	r3, r7
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe08 	bl	800014c <strlen>
 800053c:	4603      	mov	r3, r0
 800053e:	b29a      	uxth	r2, r3
 8000540:	4639      	mov	r1, r7
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <disable_connection+0x38>)
 8000548:	f003 f820 	bl	800358c <HAL_UART_Transmit>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	08004320 	.word	0x08004320
 8000558:	200001a4 	.word	0x200001a4

0800055c <clear_string>:

/* USER CODE BEGIN PV */

/* USER CODE END PV */
static void clear_string(char *src)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d02f      	beq.n	80005ce <clear_string+0x72>
	uint8_t i = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	e022      	b.n	80005be <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8000578:	7afb      	ldrb	r3, [r7, #11]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d80b      	bhi.n	8000596 <clear_string+0x3a>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b0a      	cmp	r3, #10
 8000584:	d003      	beq.n	800058e <clear_string+0x32>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b0d      	cmp	r3, #13
 800058c:	d103      	bne.n	8000596 <clear_string+0x3a>
		{
			i++;
 800058e:	7afb      	ldrb	r3, [r7, #11]
 8000590:	3301      	adds	r3, #1
 8000592:	72fb      	strb	r3, [r7, #11]
			continue;
 8000594:	e010      	b.n	80005b8 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b0a      	cmp	r3, #10
 800059c:	d003      	beq.n	80005a6 <clear_string+0x4a>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b0d      	cmp	r3, #13
 80005a4:	d102      	bne.n	80005ac <clear_string+0x50>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2220      	movs	r2, #32
 80005aa:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	60fa      	str	r2, [r7, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3301      	adds	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1d8      	bne.n	8000578 <clear_string+0x1c>
	}

	*dst = 0;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e000      	b.n	80005d0 <clear_string+0x74>
	if(!src) return;
 80005ce:	bf00      	nop
}
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <HAL_TIM_PeriodElapsedCallback>:

///////////////////// колбек таймера //////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d102      	bne.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flag = 1;
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
	}
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40000800 	.word	0x40000800
 8000600:	2000008c 	.word	0x2000008c

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b0ac      	sub	sp, #176	; 0xb0
 8000608:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 feeb 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 fb4f 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f7ff fda3 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000616:	f000 fd53 	bl	80010c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800061a:	f000 fd7b 	bl	8001114 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800061e:	f000 fcdb 	bl	8000fd8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_Delay(15000); // задержка чтоб модем успел раздуплиться, если его включение происходит вместе с включением МК
 8000622:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000626:	f000 ff3f 	bl	80014a8 <HAL_Delay>

    __HAL_UART_ENABLE_IT(GSM, UART_IT_RXNE);
 800062a:	4bb0      	ldr	r3, [pc, #704]	; (80008ec <main+0x2e8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68da      	ldr	r2, [r3, #12]
 8000630:	4bae      	ldr	r3, [pc, #696]	; (80008ec <main+0x2e8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f042 0220 	orr.w	r2, r2, #32
 8000638:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(DEBUG, UART_IT_RXNE);
 800063a:	4bad      	ldr	r3, [pc, #692]	; (80008f0 <main+0x2ec>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	4bab      	ldr	r3, [pc, #684]	; (80008f0 <main+0x2ec>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f042 0220 	orr.w	r2, r2, #32
 8000648:	60da      	str	r2, [r3, #12]
 

    set_comand(ATCPAS);  // проверка статуса модема
 800064a:	48aa      	ldr	r0, [pc, #680]	; (80008f4 <main+0x2f0>)
 800064c:	f7ff fe12 	bl	8000274 <set_comand>
      set_comand(ATCREG);  // проверка регистрации в сети - должен вернуть  +CREG: 0,1
 8000650:	48a9      	ldr	r0, [pc, #676]	; (80008f8 <main+0x2f4>)
 8000652:	f7ff fe0f 	bl	8000274 <set_comand>
      set_comand(ATCLIP1); // включить АОН
 8000656:	48a9      	ldr	r0, [pc, #676]	; (80008fc <main+0x2f8>)
 8000658:	f7ff fe0c 	bl	8000274 <set_comand>
      set_comand(ATE);     // отключить «эхо»
 800065c:	48a8      	ldr	r0, [pc, #672]	; (8000900 <main+0x2fc>)
 800065e:	f7ff fe09 	bl	8000274 <set_comand>
      set_comand(ATS);     // поднимать трубку только "вручную"
 8000662:	48a8      	ldr	r0, [pc, #672]	; (8000904 <main+0x300>)
 8000664:	f7ff fe06 	bl	8000274 <set_comand>
      set_comand(ATDDET);  // включить DTMF
 8000668:	48a7      	ldr	r0, [pc, #668]	; (8000908 <main+0x304>)
 800066a:	f7ff fe03 	bl	8000274 <set_comand>
      //set_comand(ATCCLKK); // установить дату/время

      /////////////////// настройки для работы с sms ////////////////
      set_comand(ATCMGF);    // устанавливает текстовый режим смс-сообщения
 800066e:	48a7      	ldr	r0, [pc, #668]	; (800090c <main+0x308>)
 8000670:	f7ff fe00 	bl	8000274 <set_comand>
      set_comand(ATCPBS);    // открывает доступ к данным телефонной книги SIM-карты
 8000674:	48a6      	ldr	r0, [pc, #664]	; (8000910 <main+0x30c>)
 8000676:	f7ff fdfd 	bl	8000274 <set_comand>
      set_comand(ATCSCS);    // кодировка текста - GSM
 800067a:	48a6      	ldr	r0, [pc, #664]	; (8000914 <main+0x310>)
 800067c:	f7ff fdfa 	bl	8000274 <set_comand>
      set_comand(ATCNMI);    // настройка вывода смс в консоль
 8000680:	48a5      	ldr	r0, [pc, #660]	; (8000918 <main+0x314>)
 8000682:	f7ff fdf7 	bl	8000274 <set_comand>

      //////////////////// различная инфа /////////////////////
      set_comand(ATIPR);       // скорость usart'a модема
 8000686:	48a5      	ldr	r0, [pc, #660]	; (800091c <main+0x318>)
 8000688:	f7ff fdf4 	bl	8000274 <set_comand>
      set_comand(ATI);         // название и версия модуля
 800068c:	48a4      	ldr	r0, [pc, #656]	; (8000920 <main+0x31c>)
 800068e:	f7ff fdf1 	bl	8000274 <set_comand>
      set_comand(ATCGSN);      // считывание IMEI из EEPROM
 8000692:	48a4      	ldr	r0, [pc, #656]	; (8000924 <main+0x320>)
 8000694:	f7ff fdee 	bl	8000274 <set_comand>
      set_comand(ATCSPN);      // оператор сети
 8000698:	48a3      	ldr	r0, [pc, #652]	; (8000928 <main+0x324>)
 800069a:	f7ff fdeb 	bl	8000274 <set_comand>

      HAL_TIM_Base_Start_IT(&htim4);
 800069e:	48a3      	ldr	r0, [pc, #652]	; (800092c <main+0x328>)
 80006a0:	f002 f92a 	bl	80028f8 <HAL_TIM_Base_Start_IT>

      char buf[GSM_RX_BUFFER_SIZE] = {0,};
 80006a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006a8:	2240      	movs	r2, #64	; 0x40
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 f993 	bl	80039d8 <memset>
      char str[GSM_RX_BUFFER_SIZE] = {0,};
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	2240      	movs	r2, #64	; 0x40
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f98c 	bl	80039d8 <memset>
//      HAL_Delay(1000);
//      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c4:	489a      	ldr	r0, [pc, #616]	; (8000930 <main+0x32c>)
 80006c6:	f001 fab9 	bl	8001c3c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f000 feec 	bl	80014a8 <HAL_Delay>
    /* USER CODE BEGIN 3 */
	  if(flag == 1)
 80006d0:	4b98      	ldr	r3, [pc, #608]	; (8000934 <main+0x330>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d102      	bne.n	80006e0 <main+0xdc>
	  	{
	  		flag = 0;
 80006da:	4b96      	ldr	r3, [pc, #600]	; (8000934 <main+0x330>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	  		//get_date_time(); // будет раз в секунду выводить время
	  	}


	  	if(gsm_available()) //если модуль что-то прислал
 80006e0:	f000 fdd6 	bl	8001290 <gsm_available>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f000 827b 	beq.w	8000be2 <main+0x5de>
	  	{
	  		uint16_t i = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	  		uint8_t fdbg = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
	  		memset(buf, 0, GSM_RX_BUFFER_SIZE);
 80006f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f003 f969 	bl	80039d8 <memset>
	  		HAL_Delay(50);
 8000706:	2032      	movs	r0, #50	; 0x32
 8000708:	f000 fece 	bl	80014a8 <HAL_Delay>

	  		while(gsm_available())
 800070c:	e015      	b.n	800073a <main+0x136>
	  		{
	  			buf[i++] = gsm_read();
 800070e:	f000 fdd5 	bl	80012bc <gsm_read>
 8000712:	4603      	mov	r3, r0
 8000714:	4619      	mov	r1, r3
 8000716:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8000720:	b2ca      	uxtb	r2, r1
 8000722:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000726:	440b      	add	r3, r1
 8000728:	f803 2c4c 	strb.w	r2, [r3, #-76]
	  			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 800072c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000730:	2b3f      	cmp	r3, #63	; 0x3f
 8000732:	d808      	bhi.n	8000746 <main+0x142>
	  			HAL_Delay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 feb7 	bl	80014a8 <HAL_Delay>
	  		while(gsm_available())
 800073a:	f000 fda9 	bl	8001290 <gsm_available>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1e4      	bne.n	800070e <main+0x10a>
 8000744:	e000      	b.n	8000748 <main+0x144>
	  			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8000746:	bf00      	nop
	  		}

	  		clear_string(buf); // очищаем строку от символов \r и \n
 8000748:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff05 	bl	800055c <clear_string>

	  		/////////////////// НАЧИНАЕМ РАСПОЗНАВАТЬ ЧТО ПРИСЛАЛ МОДУЛЬ /////////////////////
	  		if(strstr(buf, "RING") != NULL) // ЕСЛИ ЭТО ЗВОНОК
 8000752:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000756:	4978      	ldr	r1, [pc, #480]	; (8000938 <main+0x334>)
 8000758:	4618      	mov	r0, r3
 800075a:	f003 f986 	bl	8003a6a <strstr>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d034      	beq.n	80007ce <main+0x1ca>
	  		{
	  			if(strstr(buf, "+375") != NULL) // если звонит нужный номер
 8000764:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000768:	4974      	ldr	r1, [pc, #464]	; (800093c <main+0x338>)
 800076a:	4618      	mov	r0, r3
 800076c:	f003 f97d 	bl	8003a6a <strstr>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d021      	beq.n	80007ba <main+0x1b6>
	  			{
	  				// что-то делаем
	  				HAL_UART_Transmit(DEBUG, (uint8_t*)"My number\n", strlen("My number\n"), 1000);
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	220a      	movs	r2, #10
 800077c:	4970      	ldr	r1, [pc, #448]	; (8000940 <main+0x33c>)
 800077e:	485c      	ldr	r0, [pc, #368]	; (80008f0 <main+0x2ec>)
 8000780:	f002 ff04 	bl	800358c <HAL_UART_Transmit>
	  				//incoming_call(); // можно принять звонок


	  				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	486e      	ldr	r0, [pc, #440]	; (8000944 <main+0x340>)
 800078a:	f001 fa25 	bl	8001bd8 <HAL_GPIO_WritePin>
	  				disable_connection(); // сброс соединения
 800078e:	f7ff fec7 	bl	8000520 <disable_connection>
	  				HAL_Delay(3000);
 8000792:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000796:	f000 fe87 	bl	80014a8 <HAL_Delay>
	  				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	4869      	ldr	r0, [pc, #420]	; (8000944 <main+0x340>)
 80007a0:	f001 fa1a 	bl	8001bd8 <HAL_GPIO_WritePin>
	  					  				  				  			  				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	4861      	ldr	r0, [pc, #388]	; (8000930 <main+0x32c>)
 80007ac:	f001 fa14 	bl	8001bd8 <HAL_GPIO_WritePin>
	  					  				  				  			  				HAL_Delay(2000);
 80007b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007b4:	f000 fe78 	bl	80014a8 <HAL_Delay>
 80007b8:	e1f9      	b.n	8000bae <main+0x5aa>

	  			}
	  			else
	  			{
	  				HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknow number\n", strlen("Unknow number\n"), 1000);
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	220e      	movs	r2, #14
 80007c0:	4961      	ldr	r1, [pc, #388]	; (8000948 <main+0x344>)
 80007c2:	484b      	ldr	r0, [pc, #300]	; (80008f0 <main+0x2ec>)
 80007c4:	f002 fee2 	bl	800358c <HAL_UART_Transmit>
	  				disable_connection(); // сброс соединения
 80007c8:	f7ff feaa 	bl	8000520 <disable_connection>
 80007cc:	e1ef      	b.n	8000bae <main+0x5aa>
	  			}
	  		}
	  		else if(strstr(buf, "+CMT:") != NULL) // ЕСЛИ ЭТО SMS
 80007ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007d2:	495e      	ldr	r1, [pc, #376]	; (800094c <main+0x348>)
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 f948 	bl	8003a6a <strstr>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f000 80c5 	beq.w	800096c <main+0x368>
	  		{
	  			if(strstr(buf, "+375") != NULL) // проверяем от кого смс
 80007e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007e6:	4955      	ldr	r1, [pc, #340]	; (800093c <main+0x338>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 f93e 	bl	8003a6a <strstr>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d052      	beq.n	800089a <main+0x296>
	  			{
	  				HAL_UART_Transmit(DEBUG, (uint8_t*)"Sms my number\n", strlen("Sms my number\n"), 1000);
 80007f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f8:	220e      	movs	r2, #14
 80007fa:	4955      	ldr	r1, [pc, #340]	; (8000950 <main+0x34c>)
 80007fc:	483c      	ldr	r0, [pc, #240]	; (80008f0 <main+0x2ec>)
 80007fe:	f002 fec5 	bl	800358c <HAL_UART_Transmit>

	  				// что-то делаем или ищем какую-то строку, которую мы послали в смс, например слово "Hello"
	  				if(strstr(buf, "Hello") != NULL)
 8000802:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000806:	4953      	ldr	r1, [pc, #332]	; (8000954 <main+0x350>)
 8000808:	4618      	mov	r0, r3
 800080a:	f003 f92e 	bl	8003a6a <strstr>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d007      	beq.n	8000824 <main+0x220>
	  				{
	  					HAL_UART_Transmit(DEBUG, (uint8_t*)"Reciv Hello\n", strlen("Reciv Hello\n"), 1000);
 8000814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000818:	220c      	movs	r2, #12
 800081a:	494f      	ldr	r1, [pc, #316]	; (8000958 <main+0x354>)
 800081c:	4834      	ldr	r0, [pc, #208]	; (80008f0 <main+0x2ec>)
 800081e:	f002 feb5 	bl	800358c <HAL_UART_Transmit>
 8000822:	e1c4      	b.n	8000bae <main+0x5aa>
	  					// что-то делаем


	  				}
	  				else if(strstr(buf, "Call") != NULL) // если прилетело слово "Call" то звоним
 8000824:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000828:	494c      	ldr	r1, [pc, #304]	; (800095c <main+0x358>)
 800082a:	4618      	mov	r0, r3
 800082c:	f003 f91d 	bl	8003a6a <strstr>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	f040 81bb 	bne.w	8000bae <main+0x5aa>
	  				{
	  					//call(); // номер указать в файле gsm.c
	  				}
	  				else if(strstr(buf, "Money") != NULL) // если отпрвить sms со словом "Money", то в ответ придёт смс с балансом (деньги) на модеме
 8000838:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800083c:	4948      	ldr	r1, [pc, #288]	; (8000960 <main+0x35c>)
 800083e:	4618      	mov	r0, r3
 8000840:	f003 f913 	bl	8003a6a <strstr>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <main+0x24c>
	  				{
	  					balance(); // посылаем команду узнать баланс
 800084a:	f7ff fe4d 	bl	80004e8 <balance>
 800084e:	e1ae      	b.n	8000bae <main+0x5aa>
	  				}
	  				else if(strstr(buf, "RRR") != NULL) // если отпрвить sms со словом "RRR"
 8000850:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000854:	4943      	ldr	r1, [pc, #268]	; (8000964 <main+0x360>)
 8000856:	4618      	mov	r0, r3
 8000858:	f003 f907 	bl	8003a6a <strstr>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	f000 81a5 	beq.w	8000bae <main+0x5aa>
	  				{
	  					HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	4836      	ldr	r0, [pc, #216]	; (8000944 <main+0x340>)
 800086a:	f001 f9b5 	bl	8001bd8 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000874:	482e      	ldr	r0, [pc, #184]	; (8000930 <main+0x32c>)
 8000876:	f001 f9af 	bl	8001bd8 <HAL_GPIO_WritePin>
	  					HAL_Delay(7000);
 800087a:	f641 3058 	movw	r0, #7000	; 0x1b58
 800087e:	f000 fe13 	bl	80014a8 <HAL_Delay>
	  					HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	482f      	ldr	r0, [pc, #188]	; (8000944 <main+0x340>)
 8000888:	f001 f9a6 	bl	8001bd8 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	4827      	ldr	r0, [pc, #156]	; (8000930 <main+0x32c>)
 8000894:	f001 f9a0 	bl	8001bd8 <HAL_GPIO_WritePin>
 8000898:	e189      	b.n	8000bae <main+0x5aa>

	  				}
	  			}
	  			else
	  			{
	  				HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknown number sms\n", strlen("Unknow number sms\n"), 1000);
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	2212      	movs	r2, #18
 80008a0:	4931      	ldr	r1, [pc, #196]	; (8000968 <main+0x364>)
 80008a2:	4813      	ldr	r0, [pc, #76]	; (80008f0 <main+0x2ec>)
 80008a4:	f002 fe72 	bl	800358c <HAL_UART_Transmit>
	  				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//1
 80008a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ac:	4820      	ldr	r0, [pc, #128]	; (8000930 <main+0x32c>)
 80008ae:	f001 f9c5 	bl	8001c3c <HAL_GPIO_TogglePin>
	  					  				HAL_Delay(200);
 80008b2:	20c8      	movs	r0, #200	; 0xc8
 80008b4:	f000 fdf8 	bl	80014a8 <HAL_Delay>
	  					  				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	481c      	ldr	r0, [pc, #112]	; (8000930 <main+0x32c>)
 80008be:	f001 f9bd 	bl	8001c3c <HAL_GPIO_TogglePin>
	  					  				HAL_Delay(200);
 80008c2:	20c8      	movs	r0, #200	; 0xc8
 80008c4:	f000 fdf0 	bl	80014a8 <HAL_Delay>
	  					  				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//2
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	4818      	ldr	r0, [pc, #96]	; (8000930 <main+0x32c>)
 80008ce:	f001 f9b5 	bl	8001c3c <HAL_GPIO_TogglePin>
	  					  				HAL_Delay(200);
 80008d2:	20c8      	movs	r0, #200	; 0xc8
 80008d4:	f000 fde8 	bl	80014a8 <HAL_Delay>
	  					  				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <main+0x32c>)
 80008de:	f001 f9ad 	bl	8001c3c <HAL_GPIO_TogglePin>
	  					  				HAL_Delay(1000);
 80008e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e6:	f000 fddf 	bl	80014a8 <HAL_Delay>
 80008ea:	e160      	b.n	8000bae <main+0x5aa>
 80008ec:	200001a4 	.word	0x200001a4
 80008f0:	20000164 	.word	0x20000164
 80008f4:	08004350 	.word	0x08004350
 80008f8:	08004358 	.word	0x08004358
 80008fc:	08004364 	.word	0x08004364
 8000900:	08004370 	.word	0x08004370
 8000904:	08004378 	.word	0x08004378
 8000908:	08004380 	.word	0x08004380
 800090c:	0800438c 	.word	0x0800438c
 8000910:	08004398 	.word	0x08004398
 8000914:	080043a8 	.word	0x080043a8
 8000918:	080043b8 	.word	0x080043b8
 800091c:	080043cc 	.word	0x080043cc
 8000920:	080043d4 	.word	0x080043d4
 8000924:	080043d8 	.word	0x080043d8
 8000928:	080043e0 	.word	0x080043e0
 800092c:	20000124 	.word	0x20000124
 8000930:	40011000 	.word	0x40011000
 8000934:	2000008c 	.word	0x2000008c
 8000938:	080043ec 	.word	0x080043ec
 800093c:	080043f4 	.word	0x080043f4
 8000940:	080043fc 	.word	0x080043fc
 8000944:	40010c00 	.word	0x40010c00
 8000948:	08004408 	.word	0x08004408
 800094c:	08004418 	.word	0x08004418
 8000950:	08004420 	.word	0x08004420
 8000954:	08004430 	.word	0x08004430
 8000958:	08004438 	.word	0x08004438
 800095c:	08004448 	.word	0x08004448
 8000960:	08004450 	.word	0x08004450
 8000964:	08004458 	.word	0x08004458
 8000968:	0800445c 	.word	0x0800445c
	  			}
	  		}
	  		else if(strstr(buf, "+CUSD") != NULL)  // ЕСЛИ ЭТО СТРОКА С БАЛАНСОМ
 800096c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000970:	49c1      	ldr	r1, [pc, #772]	; (8000c78 <main+0x674>)
 8000972:	4618      	mov	r0, r3
 8000974:	f003 f879 	bl	8003a6a <strstr>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d05d      	beq.n	8000a3a <main+0x436>
	  		{
	  			char *p = NULL;
 800097e:	2300      	movs	r3, #0
 8000980:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	  			if((p = strstr(buf, "Balance")) != NULL) // ищем слово "Balance"
 8000984:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000988:	49bc      	ldr	r1, [pc, #752]	; (8000c7c <main+0x678>)
 800098a:	4618      	mov	r0, r3
 800098c:	f003 f86d 	bl	8003a6a <strstr>
 8000990:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8000994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 8108 	beq.w	8000bae <main+0x5aa>
	  			{
	  				// отправляем смс с балансом на указанный телефон, укажите нужный номер и раскомментируйте этот блок
	  				snprintf(str, GSM_RX_BUFFER_SIZE, "AT+CMGS=\"+375336675442\"\r\n"); // номер
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4ab7      	ldr	r2, [pc, #732]	; (8000c80 <main+0x67c>)
 80009a4:	461c      	mov	r4, r3
 80009a6:	4615      	mov	r5, r2
 80009a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b0:	c403      	stmia	r4!, {r0, r1}
 80009b2:	8022      	strh	r2, [r4, #0]
	  				HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fbc7 	bl	800014c <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	48ae      	ldr	r0, [pc, #696]	; (8000c84 <main+0x680>)
 80009cc:	f002 fdde 	bl	800358c <HAL_UART_Transmit>
	  				HAL_Delay(100);
 80009d0:	2064      	movs	r0, #100	; 0x64
 80009d2:	f000 fd69 	bl	80014a8 <HAL_Delay>
	  				snprintf(str, GSM_RX_BUFFER_SIZE, "%s", p); // текст смс
 80009d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80009da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009de:	4aaa      	ldr	r2, [pc, #680]	; (8000c88 <main+0x684>)
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	f003 f801 	bl	80039e8 <sniprintf>
	  				HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fbae 	bl	800014c <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fc:	48a1      	ldr	r0, [pc, #644]	; (8000c84 <main+0x680>)
 80009fe:	f002 fdc5 	bl	800358c <HAL_UART_Transmit>
	  				p = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  				HAL_Delay(100);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f000 fd4d 	bl	80014a8 <HAL_Delay>
	  				snprintf(str, GSM_RX_BUFFER_SIZE, "%c", (char)26); // символ ctrl-z
 8000a0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000a12:	231a      	movs	r3, #26
 8000a14:	4a9d      	ldr	r2, [pc, #628]	; (8000c8c <main+0x688>)
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	f002 ffe6 	bl	80039e8 <sniprintf>
	  				HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fb93 	bl	800014c <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	4894      	ldr	r0, [pc, #592]	; (8000c84 <main+0x680>)
 8000a34:	f002 fdaa 	bl	800358c <HAL_UART_Transmit>
 8000a38:	e0b9      	b.n	8000bae <main+0x5aa>
	  				// блок закомментирован чтоб модуль не слал смски пока тестируете
	  			}
	  		}
	  		else if(strstr(buf, "+DTMF") != NULL)  //ЕСЛИ ЭТО DTMF СИГНАЛ
 8000a3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a3e:	4994      	ldr	r1, [pc, #592]	; (8000c90 <main+0x68c>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 f812 	bl	8003a6a <strstr>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d023      	beq.n	8000a94 <main+0x490>
	  		{
	  			if(strstr(buf, "0") != NULL) // если пришёл сигнал кнопки 0
 8000a4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a50:	2130      	movs	r1, #48	; 0x30
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fffc 	bl	8003a50 <strchr>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <main+0x46a>
	  			{
	  				// что-то делаем
	  				HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 0\n", strlen("DTMF Button 0\n"), 1000);
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	220e      	movs	r2, #14
 8000a64:	498b      	ldr	r1, [pc, #556]	; (8000c94 <main+0x690>)
 8000a66:	488c      	ldr	r0, [pc, #560]	; (8000c98 <main+0x694>)
 8000a68:	f002 fd90 	bl	800358c <HAL_UART_Transmit>
 8000a6c:	e00f      	b.n	8000a8e <main+0x48a>
	  			}
	  			else if(strstr(buf, "1") != NULL) // если пришёл сигнал кнопки 1
 8000a6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a72:	2131      	movs	r1, #49	; 0x31
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 ffeb 	bl	8003a50 <strchr>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d006      	beq.n	8000a8e <main+0x48a>
	  			{
	  				// что-то делаем
	  				HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 1\n", strlen("DTMF Button 1\n"), 1000);
 8000a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a84:	220e      	movs	r2, #14
 8000a86:	4985      	ldr	r1, [pc, #532]	; (8000c9c <main+0x698>)
 8000a88:	4883      	ldr	r0, [pc, #524]	; (8000c98 <main+0x694>)
 8000a8a:	f002 fd7f 	bl	800358c <HAL_UART_Transmit>
	  			}
	  			// и т.д.

	  			disable_connection(); // разрываем соединение, или не разрываем (в зависимости от того, что вам нужно)
 8000a8e:	f7ff fd47 	bl	8000520 <disable_connection>
 8000a92:	e08c      	b.n	8000bae <main+0x5aa>
	  		}
	  		else if(strstr(buf, "+CCLK") != NULL)  // ЕСЛИ ЭТО ДАТА/ВРЕМЯ
 8000a94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a98:	4981      	ldr	r1, [pc, #516]	; (8000ca0 <main+0x69c>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 ffe5 	bl	8003a6a <strstr>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 8083 	beq.w	8000bae <main+0x5aa>
	  		{
	  			replac_string(buf);
 8000aa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fbc1 	bl	8000234 <replac_string>
	  			char res[32] = {0,};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 ff8d 	bl	80039d8 <memset>

	  			for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000ac4:	e057      	b.n	8000b76 <main+0x572>
	  			{
	  				if(buf[i] == '"')
 8000ac6:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000aca:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000ace:	4413      	add	r3, r2
 8000ad0:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000ad4:	2b22      	cmp	r3, #34	; 0x22
 8000ad6:	d149      	bne.n	8000b6c <main+0x568>
	  				{
	  					i++;
 8000ad8:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000adc:	3301      	adds	r3, #1
 8000ade:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
	  					for(uint8_t j = 0; j < 20; i++, j++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000ae8:	e03b      	b.n	8000b62 <main+0x55e>
	  					{
	  						if(buf[i] == '+')
 8000aea:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000aee:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000af2:	4413      	add	r3, r2
 8000af4:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000af8:	2b2b      	cmp	r3, #43	; 0x2b
 8000afa:	d109      	bne.n	8000b10 <main+0x50c>
	  						{
	  							buf[i] = 0;
 8000afc:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b00:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000b04:	4413      	add	r3, r2
 8000b06:	2200      	movs	r2, #0
 8000b08:	f803 2c4c 	strb.w	r2, [r3, #-76]
	  							break;
 8000b0c:	bf00      	nop

	  						if(buf[i] == ',') buf[i] = ' ';
	  						res[j] = buf[i];
	  					}

	  					break;
 8000b0e:	e036      	b.n	8000b7e <main+0x57a>
	  						if(buf[i] == ',') buf[i] = ' ';
 8000b10:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b14:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000b18:	4413      	add	r3, r2
 8000b1a:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000b1e:	2b2c      	cmp	r3, #44	; 0x2c
 8000b20:	d107      	bne.n	8000b32 <main+0x52e>
 8000b22:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b26:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000b2a:	4413      	add	r3, r2
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	f803 2c4c 	strb.w	r2, [r3, #-76]
	  						res[j] = buf[i];
 8000b32:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8000b36:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b3a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000b3e:	440a      	add	r2, r1
 8000b40:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 8000b44:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000b48:	440b      	add	r3, r1
 8000b4a:	f803 2cac 	strb.w	r2, [r3, #-172]
	  					for(uint8_t j = 0; j < 20; i++, j++)
 8000b4e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b52:	3301      	adds	r3, #1
 8000b54:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000b58:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000b62:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b66:	2b13      	cmp	r3, #19
 8000b68:	d9bf      	bls.n	8000aea <main+0x4e6>
	  					break;
 8000b6a:	e008      	b.n	8000b7e <main+0x57a>
	  			for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 8000b6c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b70:	3301      	adds	r3, #1
 8000b72:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000b76:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b7a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b7c:	d9a3      	bls.n	8000ac6 <main+0x4c2>
	  				}
	  			}

	  			snprintf(str, GSM_RX_BUFFER_SIZE, "DateTime %s\n", res);
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000b84:	4a47      	ldr	r2, [pc, #284]	; (8000ca4 <main+0x6a0>)
 8000b86:	2140      	movs	r1, #64	; 0x40
 8000b88:	f002 ff2e 	bl	80039e8 <sniprintf>
	  			HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fadb 	bl	800014c <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	483d      	ldr	r0, [pc, #244]	; (8000c98 <main+0x694>)
 8000ba4:	f002 fcf2 	bl	800358c <HAL_UART_Transmit>
	  			fdbg = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
	  		}

	  		if(fdbg)
 8000bae:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d015      	beq.n	8000be2 <main+0x5de>
	  		{
	  			snprintf(str, GSM_RX_BUFFER_SIZE, "%s\n", buf);
 8000bb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000bbe:	4a3a      	ldr	r2, [pc, #232]	; (8000ca8 <main+0x6a4>)
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	f002 ff11 	bl	80039e8 <sniprintf>
	  			HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fabe 	bl	800014c <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bdc:	482e      	ldr	r0, [pc, #184]	; (8000c98 <main+0x694>)
 8000bde:	f002 fcd5 	bl	800358c <HAL_UART_Transmit>
	  		}
	  	}


	  	////////////////////////////////////// DEBUG ////////////////////////////////////////
	  	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8000be2:	f000 fb97 	bl	8001314 <dbg_available>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f43f ad69 	beq.w	80006c0 <main+0xbc>
	  	{
	  		uint16_t i = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	  		memset(buf, 0, GSM_RX_BUFFER_SIZE);
 8000bf4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bf8:	2240      	movs	r2, #64	; 0x40
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 feeb 	bl	80039d8 <memset>

	  		while(dbg_available())
 8000c02:	e015      	b.n	8000c30 <main+0x62c>
	  		{
	  			buf[i++] = dbg_read();
 8000c04:	f000 fb9c 	bl	8001340 <dbg_read>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	f8a7 20a8 	strh.w	r2, [r7, #168]	; 0xa8
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000c1c:	440b      	add	r3, r1
 8000c1e:	f803 2c4c 	strb.w	r2, [r3, #-76]
	  			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8000c22:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c26:	2b3f      	cmp	r3, #63	; 0x3f
 8000c28:	d808      	bhi.n	8000c3c <main+0x638>
	  			HAL_Delay(1);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f000 fc3c 	bl	80014a8 <HAL_Delay>
	  		while(dbg_available())
 8000c30:	f000 fb70 	bl	8001314 <dbg_available>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1e4      	bne.n	8000c04 <main+0x600>
 8000c3a:	e000      	b.n	8000c3e <main+0x63a>
	  			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8000c3c:	bf00      	nop
	  		}

	  		clear_string(buf);
 8000c3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc8a 	bl	800055c <clear_string>
	  		snprintf(str, GSM_RX_BUFFER_SIZE, "%s\r\n", buf);
 8000c48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c4c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000c50:	4a16      	ldr	r2, [pc, #88]	; (8000cac <main+0x6a8>)
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	f002 fec8 	bl	80039e8 <sniprintf>
	  		HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fa75 	bl	800014c <strlen>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <main+0x680>)
 8000c70:	f002 fc8c 	bl	800358c <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c74:	e524      	b.n	80006c0 <main+0xbc>
 8000c76:	bf00      	nop
 8000c78:	08004470 	.word	0x08004470
 8000c7c:	08004478 	.word	0x08004478
 8000c80:	08004480 	.word	0x08004480
 8000c84:	200001a4 	.word	0x200001a4
 8000c88:	0800449c 	.word	0x0800449c
 8000c8c:	080044a0 	.word	0x080044a0
 8000c90:	080044a4 	.word	0x080044a4
 8000c94:	080044ac 	.word	0x080044ac
 8000c98:	20000164 	.word	0x20000164
 8000c9c:	080044bc 	.word	0x080044bc
 8000ca0:	080044cc 	.word	0x080044cc
 8000ca4:	080044d4 	.word	0x080044d4
 8000ca8:	080044e4 	.word	0x080044e4
 8000cac:	080044e8 	.word	0x080044e8

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b090      	sub	sp, #64	; 0x40
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	2228      	movs	r2, #40	; 0x28
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 fe8a 	bl	80039d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf4:	f107 0318 	add.w	r3, r7, #24
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 ffc5 	bl	8001c88 <HAL_RCC_OscConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d04:	f000 f819 	bl	8000d3a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d08:	230f      	movs	r3, #15
 8000d0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fb20 	bl	8002368 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d2e:	f000 f804 	bl	8000d3a <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3740      	adds	r7, #64	; 0x40
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_MspInit+0x60>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_MspInit+0x60>)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <BusFault_Handler+0x4>

08000dde <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <UsageFault_Handler+0x4>

08000de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 fb30 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <TIM4_IRQHandler+0x10>)
 8000e1a:	f001 fdb1 	bl	8002980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
//
  /* USER CODE END TIM4_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000124 	.word	0x20000124

08000e28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <USART1_IRQHandler+0x68>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0320 	and.w	r3, r3, #32
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d023      	beq.n	8000e84 <USART1_IRQHandler+0x5c>
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <USART1_IRQHandler+0x68>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	f003 0320 	and.w	r3, r3, #32
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d01c      	beq.n	8000e84 <USART1_IRQHandler+0x5c>
		{
			uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <USART1_IRQHandler+0x68>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	71fb      	strb	r3, [r7, #7]
			dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <USART1_IRQHandler+0x6c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e60:	71bb      	strb	r3, [r7, #6]

			if(i != dbg_rx_buffer_tail)
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <USART1_IRQHandler+0x70>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d00a      	beq.n	8000e84 <USART1_IRQHandler+0x5c>
			{
				dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <USART1_IRQHandler+0x6c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4619      	mov	r1, r3
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <USART1_IRQHandler+0x74>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	5453      	strb	r3, [r2, r1]
				dbg_rx_buffer_head = i;
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <USART1_IRQHandler+0x6c>)
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	7013      	strb	r3, [r2, #0]
			}
		}

		return;
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000164 	.word	0x20000164
 8000e94:	200000d8 	.word	0x200000d8
 8000e98:	200000d9 	.word	0x200000d9
 8000e9c:	200000dc 	.word	0x200000dc

08000ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <USART2_IRQHandler+0x68>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0320 	and.w	r3, r3, #32
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d023      	beq.n	8000efc <USART2_IRQHandler+0x5c>
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <USART2_IRQHandler+0x68>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d01c      	beq.n	8000efc <USART2_IRQHandler+0x5c>
		{
			uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <USART2_IRQHandler+0x68>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	71fb      	strb	r3, [r7, #7]
			gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <USART2_IRQHandler+0x6c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ed8:	71bb      	strb	r3, [r7, #6]

			if(i != gsm_rx_buffer_tail)
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <USART2_IRQHandler+0x70>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	79ba      	ldrb	r2, [r7, #6]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d00a      	beq.n	8000efc <USART2_IRQHandler+0x5c>
			{
				gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <USART2_IRQHandler+0x6c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <USART2_IRQHandler+0x74>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	5453      	strb	r3, [r2, r1]
				gsm_rx_buffer_head = i;
 8000ef4:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <USART2_IRQHandler+0x6c>)
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	7013      	strb	r3, [r2, #0]
			}
		}

		return;
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200001a4 	.word	0x200001a4
 8000f0c:	20000094 	.word	0x20000094
 8000f10:	20000095 	.word	0x20000095
 8000f14:	20000098 	.word	0x20000098

08000f18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x50>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x16>
		heap_end = &end;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <_sbrk+0x50>)
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <_sbrk+0x54>)
 8000f2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <_sbrk+0x50>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <_sbrk+0x50>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	466a      	mov	r2, sp
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d907      	bls.n	8000f52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f42:	f002 fd1f 	bl	8003984 <__errno>
 8000f46:	4602      	mov	r2, r0
 8000f48:	230c      	movs	r3, #12
 8000f4a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e006      	b.n	8000f60 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <_sbrk+0x50>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a03      	ldr	r2, [pc, #12]	; (8000f68 <_sbrk+0x50>)
 8000f5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000090 	.word	0x20000090
 8000f6c:	200001f0 	.word	0x200001f0

08000f70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <SystemInit+0x5c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <SystemInit+0x5c>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <SystemInit+0x5c>)
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	4911      	ldr	r1, [pc, #68]	; (8000fcc <SystemInit+0x5c>)
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <SystemInit+0x60>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <SystemInit+0x5c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <SystemInit+0x5c>)
 8000f92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <SystemInit+0x5c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SystemInit+0x5c>)
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <SystemInit+0x5c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SystemInit+0x5c>)
 8000fae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000fb2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SystemInit+0x5c>)
 8000fb6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000fba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SystemInit+0x64>)
 8000fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	f8ff0000 	.word	0xf8ff0000
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_TIM4_Init+0x94>)
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_TIM4_Init+0x98>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_TIM4_Init+0x94>)
 8000ffc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001000:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_TIM4_Init+0x94>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_TIM4_Init+0x94>)
 800100a:	f242 720f 	movw	r2, #9999	; 0x270f
 800100e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_TIM4_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_TIM4_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <MX_TIM4_Init+0x94>)
 800101e:	f001 fbe5 	bl	80027ec <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001028:	f7ff fe87 	bl	8000d3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <MX_TIM4_Init+0x94>)
 800103a:	f001 fda9 	bl	8002b90 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001044:	f7ff fe79 	bl	8000d3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_TIM4_Init+0x94>)
 8001056:	f002 f949 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001060:	f7ff fe6b 	bl	8000d3a <Error_Handler>
  }

}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000124 	.word	0x20000124
 8001070:	40000800 	.word	0x40000800

08001074 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_TIM_Base_MspInit+0x44>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d113      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_TIM_Base_MspInit+0x48>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_TIM_Base_MspInit+0x48>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_TIM_Base_MspInit+0x48>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2107      	movs	r1, #7
 80010a2:	201e      	movs	r0, #30
 80010a4:	f000 fb0e 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010a8:	201e      	movs	r0, #30
 80010aa:	f000 fb37 	bl	800171c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40000800 	.word	0x40000800
 80010bc:	40021000 	.word	0x40021000

080010c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_USART1_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010f8:	f002 f9a0 	bl	800343c <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f7ff fe1a 	bl	8000d3a <Error_Handler>
  }

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000164 	.word	0x20000164
 8001110:	40013800 	.word	0x40013800

08001114 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_USART2_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001120:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800114c:	f002 f976 	bl	800343c <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f7ff fdf0 	bl	8000d3a <Error_Handler>
  }

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200001a4 	.word	0x200001a4
 8001164:	40004400 	.word	0x40004400

08001168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a3f      	ldr	r2, [pc, #252]	; (8001280 <HAL_UART_MspInit+0x118>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13a      	bne.n	80011fe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001188:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <HAL_UART_MspInit+0x11c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a3d      	ldr	r2, [pc, #244]	; (8001284 <HAL_UART_MspInit+0x11c>)
 800118e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_UART_MspInit+0x11c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_UART_MspInit+0x11c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a37      	ldr	r2, [pc, #220]	; (8001284 <HAL_UART_MspInit+0x11c>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b35      	ldr	r3, [pc, #212]	; (8001284 <HAL_UART_MspInit+0x11c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	4619      	mov	r1, r3
 80011cc:	482e      	ldr	r0, [pc, #184]	; (8001288 <HAL_UART_MspInit+0x120>)
 80011ce:	f000 fac9 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4828      	ldr	r0, [pc, #160]	; (8001288 <HAL_UART_MspInit+0x120>)
 80011e8:	f000 fabc 	bl	8001764 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2106      	movs	r1, #6
 80011f0:	2025      	movs	r0, #37	; 0x25
 80011f2:	f000 fa67 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011f6:	2025      	movs	r0, #37	; 0x25
 80011f8:	f000 fa90 	bl	800171c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011fc:	e03c      	b.n	8001278 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a22      	ldr	r2, [pc, #136]	; (800128c <HAL_UART_MspInit+0x124>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d137      	bne.n	8001278 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_UART_MspInit+0x11c>)
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_UART_MspInit+0x11c>)
 800120e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001212:	61d3      	str	r3, [r2, #28]
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_UART_MspInit+0x11c>)
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_UART_MspInit+0x11c>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_UART_MspInit+0x11c>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_UART_MspInit+0x11c>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001238:	2304      	movs	r3, #4
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4619      	mov	r1, r3
 800124a:	480f      	ldr	r0, [pc, #60]	; (8001288 <HAL_UART_MspInit+0x120>)
 800124c:	f000 fa8a 	bl	8001764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001250:	2308      	movs	r3, #8
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4619      	mov	r1, r3
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <HAL_UART_MspInit+0x120>)
 8001264:	f000 fa7e 	bl	8001764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2105      	movs	r1, #5
 800126c:	2026      	movs	r0, #38	; 0x26
 800126e:	f000 fa29 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001272:	2026      	movs	r0, #38	; 0x26
 8001274:	f000 fa52 	bl	800171c <HAL_NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40013800 	.word	0x40013800
 8001284:	40021000 	.word	0x40021000
 8001288:	40010800 	.word	0x40010800
 800128c:	40004400 	.word	0x40004400

08001290 <gsm_available>:
volatile gsm_rx_buffer_index_t gsm_rx_buffer_head = 0;
volatile gsm_rx_buffer_index_t gsm_rx_buffer_tail = 0;
uint8_t gsm_rx_buffer[GSM_RX_BUFFER_SIZE] = {0,};

int16_t gsm_available(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	return ((uint16_t)(GSM_RX_BUFFER_SIZE + gsm_rx_buffer_head - gsm_rx_buffer_tail)) % GSM_RX_BUFFER_SIZE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <gsm_available+0x24>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <gsm_available+0x28>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012aa:	b21b      	sxth	r3, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	20000094 	.word	0x20000094
 80012b8:	20000095 	.word	0x20000095

080012bc <gsm_read>:

int16_t gsm_read(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
	if(gsm_rx_buffer_head == gsm_rx_buffer_tail)
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <gsm_read+0x4c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <gsm_read+0x50>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d102      	bne.n	80012d8 <gsm_read+0x1c>
	{
		return -1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e012      	b.n	80012fe <gsm_read+0x42>
	}
	else
	{
		unsigned char c = gsm_rx_buffer[gsm_rx_buffer_tail];
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <gsm_read+0x50>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <gsm_read+0x54>)
 80012e2:	5c9b      	ldrb	r3, [r3, r2]
 80012e4:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_tail = (gsm_rx_buffer_index_t)(gsm_rx_buffer_tail + 1) % GSM_RX_BUFFER_SIZE;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <gsm_read+0x50>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <gsm_read+0x50>)
 80012f8:	701a      	strb	r2, [r3, #0]
		return c;
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	b21b      	sxth	r3, r3
	}
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000094 	.word	0x20000094
 800130c:	20000095 	.word	0x20000095
 8001310:	20000098 	.word	0x20000098

08001314 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <dbg_available+0x24>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <dbg_available+0x28>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	b21b      	sxth	r3, r3
 800132a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800132e:	b21b      	sxth	r3, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	200000d8 	.word	0x200000d8
 800133c:	200000d9 	.word	0x200000d9

08001340 <dbg_read>:

int16_t dbg_read(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <dbg_read+0x4c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <dbg_read+0x50>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	429a      	cmp	r2, r3
 8001354:	d102      	bne.n	800135c <dbg_read+0x1c>
	{
		return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e012      	b.n	8001382 <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <dbg_read+0x50>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <dbg_read+0x54>)
 8001366:	5c9b      	ldrb	r3, [r3, r2]
 8001368:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <dbg_read+0x50>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <dbg_read+0x50>)
 800137c:	701a      	strb	r2, [r3, #0]
		return c;
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	b21b      	sxth	r3, r3
	}
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	200000d8 	.word	0x200000d8
 8001390:	200000d9 	.word	0x200000d9
 8001394:	200000dc 	.word	0x200000dc

08001398 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001398:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800139a:	e003      	b.n	80013a4 <LoopCopyDataInit>

0800139c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800139e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013a2:	3104      	adds	r1, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013ac:	d3f6      	bcc.n	800139c <CopyDataInit>
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013b0:	e002      	b.n	80013b8 <LoopFillZerobss>

080013b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013b4:	f842 3b04 	str.w	r3, [r2], #4

080013b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013bc:	d3f9      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013be:	f7ff fdd7 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f002 fae5 	bl	8003990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c6:	f7ff f91d 	bl	8000604 <main>
  bx lr
 80013ca:	4770      	bx	lr
  ldr r3, =_sidata
 80013cc:	080046b8 	.word	0x080046b8
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013d4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80013d8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80013dc:	200001ec 	.word	0x200001ec

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_Init+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_Init+0x28>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f945 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fcac 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f98c 	bl	800174c <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f93a 	bl	80016c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	20000008 	.word	0x20000008
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x1c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x20>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_IncTick+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000008 	.word	0x20000008
 8001490:	200001e4 	.word	0x200001e4

08001494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_GetTick+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	200001e4 	.word	0x200001e4

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff fff0 	bl	8001494 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_Delay+0x40>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffe0 	bl	8001494 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000008 	.word	0x20000008

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4906      	ldr	r1, [pc, #24]	; (8001584 <__NVIC_EnableIRQ+0x34>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff90 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b07      	cmp	r3, #7
 8001690:	d00f      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b06      	cmp	r3, #6
 8001696:	d00c      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d009      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d006      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d003      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016aa:	2192      	movs	r1, #146	; 0x92
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80016ae:	f7ff fb4a 	bl	8000d46 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff1a 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	080044f0 	.word	0x080044f0

080016c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d903      	bls.n	80016e4 <HAL_NVIC_SetPriority+0x20>
 80016dc:	21aa      	movs	r1, #170	; 0xaa
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <HAL_NVIC_SetPriority+0x54>)
 80016e0:	f7ff fb31 	bl	8000d46 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	d903      	bls.n	80016f2 <HAL_NVIC_SetPriority+0x2e>
 80016ea:	21ab      	movs	r1, #171	; 0xab
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <HAL_NVIC_SetPriority+0x54>)
 80016ee:	f7ff fb2a 	bl	8000d46 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f2:	f7ff ff1f 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	6978      	ldr	r0, [r7, #20]
 80016fe:	f7ff ff6d 	bl	80015dc <NVIC_EncodePriority>
 8001702:	4602      	mov	r2, r0
 8001704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff3c 	bl	8001588 <__NVIC_SetPriority>
}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	080044f0 	.word	0x080044f0

0800171c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	da03      	bge.n	8001736 <HAL_NVIC_EnableIRQ+0x1a>
 800172e:	21be      	movs	r1, #190	; 0xbe
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_NVIC_EnableIRQ+0x2c>)
 8001732:	f7ff fb08 	bl	8000d46 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff08 	bl	8001550 <__NVIC_EnableIRQ>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	080044f0 	.word	0x080044f0

0800174c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff73 	bl	8001640 <SysTick_Config>
 800175a:	4603      	mov	r3, r0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a9c      	ldr	r2, [pc, #624]	; (80019ec <HAL_GPIO_Init+0x288>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x42>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a9b      	ldr	r2, [pc, #620]	; (80019f0 <HAL_GPIO_Init+0x28c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00f      	beq.n	80017a6 <HAL_GPIO_Init+0x42>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a9a      	ldr	r2, [pc, #616]	; (80019f4 <HAL_GPIO_Init+0x290>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00b      	beq.n	80017a6 <HAL_GPIO_Init+0x42>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a99      	ldr	r2, [pc, #612]	; (80019f8 <HAL_GPIO_Init+0x294>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x42>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a98      	ldr	r2, [pc, #608]	; (80019fc <HAL_GPIO_Init+0x298>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x42>
 800179e:	21bd      	movs	r1, #189	; 0xbd
 80017a0:	4897      	ldr	r0, [pc, #604]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 80017a2:	f7ff fad0 	bl	8000d46 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_GPIO_Init+0x58>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x60>
 80017bc:	21be      	movs	r1, #190	; 0xbe
 80017be:	4890      	ldr	r0, [pc, #576]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 80017c0:	f7ff fac1 	bl	8000d46 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 81eb 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	f000 81e6 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b11      	cmp	r3, #17
 80017de:	f000 81e1 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	f000 81dc 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b12      	cmp	r3, #18
 80017f2:	f000 81d7 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a82      	ldr	r2, [pc, #520]	; (8001a04 <HAL_GPIO_Init+0x2a0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	f000 81d1 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a80      	ldr	r2, [pc, #512]	; (8001a08 <HAL_GPIO_Init+0x2a4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	f000 81cb 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a7e      	ldr	r2, [pc, #504]	; (8001a0c <HAL_GPIO_Init+0x2a8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	f000 81c5 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a7c      	ldr	r2, [pc, #496]	; (8001a10 <HAL_GPIO_Init+0x2ac>)
 8001820:	4293      	cmp	r3, r2
 8001822:	f000 81bf 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a7a      	ldr	r2, [pc, #488]	; (8001a14 <HAL_GPIO_Init+0x2b0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	f000 81b9 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a78      	ldr	r2, [pc, #480]	; (8001a18 <HAL_GPIO_Init+0x2b4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	f000 81b3 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b03      	cmp	r3, #3
 8001844:	f000 81ae 	beq.w	8001ba4 <HAL_GPIO_Init+0x440>
 8001848:	21bf      	movs	r1, #191	; 0xbf
 800184a:	486d      	ldr	r0, [pc, #436]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 800184c:	f7ff fa7b 	bl	8000d46 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001850:	e1a8      	b.n	8001ba4 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001852:	2201      	movs	r2, #1
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	429a      	cmp	r2, r3
 800186c:	f040 8197 	bne.w	8001b9e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <HAL_GPIO_Init+0x288>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d013      	beq.n	80018a0 <HAL_GPIO_Init+0x13c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a5d      	ldr	r2, [pc, #372]	; (80019f0 <HAL_GPIO_Init+0x28c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00f      	beq.n	80018a0 <HAL_GPIO_Init+0x13c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a5c      	ldr	r2, [pc, #368]	; (80019f4 <HAL_GPIO_Init+0x290>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00b      	beq.n	80018a0 <HAL_GPIO_Init+0x13c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a5b      	ldr	r2, [pc, #364]	; (80019f8 <HAL_GPIO_Init+0x294>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x13c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_GPIO_Init+0x298>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x13c>
 8001898:	21cd      	movs	r1, #205	; 0xcd
 800189a:	4859      	ldr	r0, [pc, #356]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 800189c:	f7ff fa53 	bl	8000d46 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b12      	cmp	r3, #18
 80018a6:	d065      	beq.n	8001974 <HAL_GPIO_Init+0x210>
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d80e      	bhi.n	80018ca <HAL_GPIO_Init+0x166>
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d04c      	beq.n	800194a <HAL_GPIO_Init+0x1e6>
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d804      	bhi.n	80018be <HAL_GPIO_Init+0x15a>
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d072      	beq.n	800199e <HAL_GPIO_Init+0x23a>
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d01d      	beq.n	80018f8 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018bc:	e0b1      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80018be:	2b03      	cmp	r3, #3
 80018c0:	f000 80ac 	beq.w	8001a1c <HAL_GPIO_Init+0x2b8>
 80018c4:	2b11      	cmp	r3, #17
 80018c6:	d02b      	beq.n	8001920 <HAL_GPIO_Init+0x1bc>
          break;
 80018c8:	e0ab      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80018ca:	4a4f      	ldr	r2, [pc, #316]	; (8001a08 <HAL_GPIO_Init+0x2a4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d066      	beq.n	800199e <HAL_GPIO_Init+0x23a>
 80018d0:	4a4d      	ldr	r2, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x2a4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d806      	bhi.n	80018e4 <HAL_GPIO_Init+0x180>
 80018d6:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <HAL_GPIO_Init+0x2a0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d060      	beq.n	800199e <HAL_GPIO_Init+0x23a>
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x2ac>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d05d      	beq.n	800199e <HAL_GPIO_Init+0x23a>
          break;
 80018e2:	e09e      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80018e4:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_GPIO_Init+0x2a8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d059      	beq.n	800199e <HAL_GPIO_Init+0x23a>
 80018ea:	4a4b      	ldr	r2, [pc, #300]	; (8001a18 <HAL_GPIO_Init+0x2b4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d056      	beq.n	800199e <HAL_GPIO_Init+0x23a>
 80018f0:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <HAL_GPIO_Init+0x2b0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d053      	beq.n	800199e <HAL_GPIO_Init+0x23a>
          break;
 80018f6:	e094      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d00b      	beq.n	8001918 <HAL_GPIO_Init+0x1b4>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d007      	beq.n	8001918 <HAL_GPIO_Init+0x1b4>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x1b4>
 8001910:	21d5      	movs	r1, #213	; 0xd5
 8001912:	483b      	ldr	r0, [pc, #236]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 8001914:	f7ff fa17 	bl	8000d46 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e080      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d00b      	beq.n	8001940 <HAL_GPIO_Init+0x1dc>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d007      	beq.n	8001940 <HAL_GPIO_Init+0x1dc>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x1dc>
 8001938:	21dc      	movs	r1, #220	; 0xdc
 800193a:	4831      	ldr	r0, [pc, #196]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 800193c:	f7ff fa03 	bl	8000d46 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	3304      	adds	r3, #4
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e06b      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d00b      	beq.n	800196a <HAL_GPIO_Init+0x206>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x206>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x206>
 8001962:	21e3      	movs	r1, #227	; 0xe3
 8001964:	4826      	ldr	r0, [pc, #152]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 8001966:	f7ff f9ee 	bl	8000d46 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	3308      	adds	r3, #8
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e056      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d00b      	beq.n	8001994 <HAL_GPIO_Init+0x230>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x230>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x230>
 800198c:	21ea      	movs	r1, #234	; 0xea
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 8001990:	f7ff f9d9 	bl	8000d46 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	330c      	adds	r3, #12
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e041      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_GPIO_Init+0x25a>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x25a>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x25a>
 80019b6:	21f7      	movs	r1, #247	; 0xf7
 80019b8:	4811      	ldr	r0, [pc, #68]	; (8001a00 <HAL_GPIO_Init+0x29c>)
 80019ba:	f7ff f9c4 	bl	8000d46 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c6:	2304      	movs	r3, #4
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e02a      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	611a      	str	r2, [r3, #16]
          break;
 80019de:	e020      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	615a      	str	r2, [r3, #20]
          break;
 80019ea:	e01a      	b.n	8001a22 <HAL_GPIO_Init+0x2be>
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40011400 	.word	0x40011400
 80019fc:	40011800 	.word	0x40011800
 8001a00:	0800452c 	.word	0x0800452c
 8001a04:	10110000 	.word	0x10110000
 8001a08:	10210000 	.word	0x10210000
 8001a0c:	10310000 	.word	0x10310000
 8001a10:	10120000 	.word	0x10120000
 8001a14:	10220000 	.word	0x10220000
 8001a18:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d801      	bhi.n	8001a2c <HAL_GPIO_Init+0x2c8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	e001      	b.n	8001a30 <HAL_GPIO_Init+0x2cc>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2bff      	cmp	r3, #255	; 0xff
 8001a36:	d802      	bhi.n	8001a3e <HAL_GPIO_Init+0x2da>
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x2e0>
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	3b08      	subs	r3, #8
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	401a      	ands	r2, r3
 8001a56:	6a39      	ldr	r1, [r7, #32]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8096 	beq.w	8001b9e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <HAL_GPIO_Init+0x458>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_GPIO_Init+0x458>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <HAL_GPIO_Init+0x458>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a8a:	4a4d      	ldr	r2, [pc, #308]	; (8001bc0 <HAL_GPIO_Init+0x45c>)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a44      	ldr	r2, [pc, #272]	; (8001bc4 <HAL_GPIO_Init+0x460>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x37a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a43      	ldr	r2, [pc, #268]	; (8001bc8 <HAL_GPIO_Init+0x464>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x376>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a42      	ldr	r2, [pc, #264]	; (8001bcc <HAL_GPIO_Init+0x468>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x372>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a41      	ldr	r2, [pc, #260]	; (8001bd0 <HAL_GPIO_Init+0x46c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x36e>
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x37c>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x37c>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x37c>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x37c>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af0:	4933      	ldr	r1, [pc, #204]	; (8001bc0 <HAL_GPIO_Init+0x45c>)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4931      	ldr	r1, [pc, #196]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
 8001b16:	e006      	b.n	8001b26 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	492c      	ldr	r1, [pc, #176]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4927      	ldr	r1, [pc, #156]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	4922      	ldr	r1, [pc, #136]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	491d      	ldr	r1, [pc, #116]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
 8001b66:	e006      	b.n	8001b76 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4918      	ldr	r1, [pc, #96]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4913      	ldr	r1, [pc, #76]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60cb      	str	r3, [r1, #12]
 8001b8e:	e006      	b.n	8001b9e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <HAL_GPIO_Init+0x470>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae4f 	bne.w	8001852 <HAL_GPIO_Init+0xee>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	40010800 	.word	0x40010800
 8001bc8:	40010c00 	.word	0x40010c00
 8001bcc:	40011000 	.word	0x40011000
 8001bd0:	40011400 	.word	0x40011400
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_GPIO_WritePin+0x20>
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_GPIO_WritePin+0x2a>
 8001bf8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001bfc:	480e      	ldr	r0, [pc, #56]	; (8001c38 <HAL_GPIO_WritePin+0x60>)
 8001bfe:	f7ff f8a2 	bl	8000d46 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001c02:	787b      	ldrb	r3, [r7, #1]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_WritePin+0x40>
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d004      	beq.n	8001c18 <HAL_GPIO_WritePin+0x40>
 8001c0e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <HAL_GPIO_WritePin+0x60>)
 8001c14:	f7ff f897 	bl	8000d46 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	0800452c 	.word	0x0800452c

08001c3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_GPIO_TogglePin+0x1c>
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_GPIO_TogglePin+0x26>
 8001c58:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8001c5c:	4809      	ldr	r0, [pc, #36]	; (8001c84 <HAL_GPIO_TogglePin+0x48>)
 8001c5e:	f7ff f872 	bl	8000d46 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	611a      	str	r2, [r3, #16]
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0800452c 	.word	0x0800452c

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e35c      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x54>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d116      	bne.n	8001cdc <HAL_RCC_OscConfig+0x54>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d110      	bne.n	8001cdc <HAL_RCC_OscConfig+0x54>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <HAL_RCC_OscConfig+0x54>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d104      	bne.n	8001cdc <HAL_RCC_OscConfig+0x54>
 8001cd2:	f240 1167 	movw	r1, #359	; 0x167
 8001cd6:	48a5      	ldr	r0, [pc, #660]	; (8001f6c <HAL_RCC_OscConfig+0x2e4>)
 8001cd8:	f7ff f835 	bl	8000d46 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 809a 	beq.w	8001e1e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00e      	beq.n	8001d10 <HAL_RCC_OscConfig+0x88>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d009      	beq.n	8001d10 <HAL_RCC_OscConfig+0x88>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d04:	d004      	beq.n	8001d10 <HAL_RCC_OscConfig+0x88>
 8001d06:	f240 116d 	movw	r1, #365	; 0x16d
 8001d0a:	4898      	ldr	r0, [pc, #608]	; (8001f6c <HAL_RCC_OscConfig+0x2e4>)
 8001d0c:	f7ff f81b 	bl	8000d46 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d10:	4b97      	ldr	r3, [pc, #604]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d00c      	beq.n	8001d36 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d1c:	4b94      	ldr	r3, [pc, #592]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d112      	bne.n	8001d4e <HAL_RCC_OscConfig+0xc6>
 8001d28:	4b91      	ldr	r3, [pc, #580]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d10b      	bne.n	8001d4e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d36:	4b8e      	ldr	r3, [pc, #568]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d06c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x194>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d168      	bne.n	8001e1c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e302      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0xde>
 8001d58:	4b85      	ldr	r3, [pc, #532]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a84      	ldr	r2, [pc, #528]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e02e      	b.n	8001dc4 <HAL_RCC_OscConfig+0x13c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x100>
 8001d6e:	4b80      	ldr	r3, [pc, #512]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7f      	ldr	r2, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b7d      	ldr	r3, [pc, #500]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7c      	ldr	r2, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e01d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x13c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x124>
 8001d92:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a76      	ldr	r2, [pc, #472]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b74      	ldr	r3, [pc, #464]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a73      	ldr	r2, [pc, #460]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x13c>
 8001dac:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6f      	ldr	r2, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a6c      	ldr	r2, [pc, #432]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fb62 	bl	8001494 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fb5e 	bl	8001494 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e2b6      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b62      	ldr	r3, [pc, #392]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x14c>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fb4e 	bl	8001494 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fb4a 	bl	8001494 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e2a2      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x174>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d079      	beq.n	8001f1e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_RCC_OscConfig+0x1bc>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d004      	beq.n	8001e44 <HAL_RCC_OscConfig+0x1bc>
 8001e3a:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001e3e:	484b      	ldr	r0, [pc, #300]	; (8001f6c <HAL_RCC_OscConfig+0x2e4>)
 8001e40:	f7fe ff81 	bl	8000d46 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	2b1f      	cmp	r3, #31
 8001e4a:	d904      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1ce>
 8001e4c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001e50:	4846      	ldr	r0, [pc, #280]	; (8001f6c <HAL_RCC_OscConfig+0x2e4>)
 8001e52:	f7fe ff78 	bl	8000d46 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d11c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x220>
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x20a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e260      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4933      	ldr	r1, [pc, #204]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	e03a      	b.n	8001f1e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_RCC_OscConfig+0x2ec>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff faed 	bl	8001494 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fae9 	bl	8001494 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e241      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4921      	ldr	r1, [pc, #132]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_OscConfig+0x2ec>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff facc 	bl	8001494 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fac8 	bl	8001494 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e220      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_RCC_OscConfig+0x2e8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d048      	beq.n	8001fbc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <HAL_RCC_OscConfig+0x2bc>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d004      	beq.n	8001f44 <HAL_RCC_OscConfig+0x2bc>
 8001f3a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001f3e:	480b      	ldr	r0, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x2e4>)
 8001f40:	f7fe ff01 	bl	8000d46 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d021      	beq.n	8001f90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_OscConfig+0x2f0>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fa9f 	bl	8001494 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f58:	e010      	b.n	8001f7c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fa9b 	bl	8001494 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d909      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1f3      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
 8001f6c:	08004568 	.word	0x08004568
 8001f70:	40021000 	.word	0x40021000
 8001f74:	42420000 	.word	0x42420000
 8001f78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7c:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0e8      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f000 fc11 	bl	80027b0 <RCC_Delay>
 8001f8e:	e015      	b.n	8001fbc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f90:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_OscConfig+0x498>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fa7d 	bl	8001494 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fa79 	bl	8001494 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1d1      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80c0 	beq.w	800214a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x368>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x368>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d004      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x368>
 8001fe6:	f240 2111 	movw	r1, #529	; 0x211
 8001fea:	484e      	ldr	r0, [pc, #312]	; (8002124 <HAL_RCC_OscConfig+0x49c>)
 8001fec:	f7fe feab 	bl	8000d46 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff0:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a46      	ldr	r2, [pc, #280]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	61d3      	str	r3, [r2, #28]
 8002008:	4b44      	ldr	r3, [pc, #272]	; (800211c <HAL_RCC_OscConfig+0x494>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002014:	2301      	movs	r3, #1
 8002016:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCC_OscConfig+0x4a0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d118      	bne.n	8002056 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002024:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_RCC_OscConfig+0x4a0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3f      	ldr	r2, [pc, #252]	; (8002128 <HAL_RCC_OscConfig+0x4a0>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7ff fa30 	bl	8001494 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7ff fa2c 	bl	8001494 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e184      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCC_OscConfig+0x4a0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d106      	bne.n	800206c <HAL_RCC_OscConfig+0x3e4>
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a2e      	ldr	r2, [pc, #184]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	e02d      	b.n	80020c8 <HAL_RCC_OscConfig+0x440>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x406>
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_RCC_OscConfig+0x494>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a25      	ldr	r2, [pc, #148]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8002086:	f023 0304 	bic.w	r3, r3, #4
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x440>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x428>
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_RCC_OscConfig+0x494>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a20      	ldr	r2, [pc, #128]	; (800211c <HAL_RCC_OscConfig+0x494>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCC_OscConfig+0x494>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_RCC_OscConfig+0x494>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0x440>
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_RCC_OscConfig+0x494>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_RCC_OscConfig+0x494>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_RCC_OscConfig+0x494>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_RCC_OscConfig+0x494>)
 80020c2:	f023 0304 	bic.w	r3, r3, #4
 80020c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff f9e0 	bl	8001494 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7ff f9dc 	bl	8001494 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e132      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_OscConfig+0x494>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0ee      	beq.n	80020d8 <HAL_RCC_OscConfig+0x450>
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7ff f9ca 	bl	8001494 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	e013      	b.n	800212c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7ff f9c6 	bl	8001494 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d90a      	bls.n	800212c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e11c      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	42420480 	.word	0x42420480
 8002124:	08004568 	.word	0x08004568
 8002128:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212c:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e5      	bne.n	8002104 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b87      	ldr	r3, [pc, #540]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a86      	ldr	r2, [pc, #536]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <HAL_RCC_OscConfig+0x4e4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d008      	beq.n	800216c <HAL_RCC_OscConfig+0x4e4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d004      	beq.n	800216c <HAL_RCC_OscConfig+0x4e4>
 8002162:	f240 21af 	movw	r1, #687	; 0x2af
 8002166:	487e      	ldr	r0, [pc, #504]	; (8002360 <HAL_RCC_OscConfig+0x6d8>)
 8002168:	f7fe fded 	bl	8000d46 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80ee 	beq.w	8002352 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002176:	4b79      	ldr	r3, [pc, #484]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	f000 80ce 	beq.w	8002320 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	2b02      	cmp	r3, #2
 800218a:	f040 80b2 	bne.w	80022f2 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_RCC_OscConfig+0x522>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219e:	d004      	beq.n	80021aa <HAL_RCC_OscConfig+0x522>
 80021a0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80021a4:	486e      	ldr	r0, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x6d8>)
 80021a6:	f7fe fdce 	bl	8000d46 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04a      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021ba:	d045      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021c4:	d040      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021ce:	d03b      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021d8:	d036      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021e2:	d031      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021ec:	d02c      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021f6:	d027      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002200:	d022      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800220a:	d01d      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002214:	d018      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002228:	d00e      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002232:	d009      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800223c:	d004      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c0>
 800223e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8002242:	4847      	ldr	r0, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x6d8>)
 8002244:	f7fe fd7f 	bl	8000d46 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_OscConfig+0x6dc>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff f921 	bl	8001494 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7ff f91d 	bl	8001494 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e075      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002268:	4b3c      	ldr	r3, [pc, #240]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d116      	bne.n	80022ac <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_OscConfig+0x612>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800228e:	d004      	beq.n	800229a <HAL_RCC_OscConfig+0x612>
 8002290:	f240 21cf 	movw	r1, #719	; 0x2cf
 8002294:	4832      	ldr	r0, [pc, #200]	; (8002360 <HAL_RCC_OscConfig+0x6d8>)
 8002296:	f7fe fd56 	bl	8000d46 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	492d      	ldr	r1, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a19      	ldr	r1, [r3, #32]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	430b      	orrs	r3, r1
 80022be:	4927      	ldr	r1, [pc, #156]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x6dc>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7ff f8e3 	bl	8001494 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7ff f8df 	bl	8001494 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e037      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x64a>
 80022f0:	e02f      	b.n	8002352 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_RCC_OscConfig+0x6dc>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff f8cc 	bl	8001494 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002300:	f7ff f8c8 	bl	8001494 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e020      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x678>
 800231e:	e018      	b.n	8002352 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e013      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_OscConfig+0x6d4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	429a      	cmp	r2, r3
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	08004568 	.word	0x08004568
 8002364:	42420060 	.word	0x42420060

08002368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e176      	b.n	800266a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d116      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x4e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d110      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x4e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x4e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x4e>
 80023ac:	f44f 714e 	mov.w	r1, #824	; 0x338
 80023b0:	4874      	ldr	r0, [pc, #464]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80023b2:	f7fe fcc8 	bl	8000d46 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x6a>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d007      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x6a>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d004      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x6a>
 80023c8:	f240 3139 	movw	r1, #825	; 0x339
 80023cc:	486d      	ldr	r0, [pc, #436]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80023ce:	f7fe fcba 	bl	8000d46 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d2:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d910      	bls.n	8002402 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e0:	4b69      	ldr	r3, [pc, #420]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 0207 	bic.w	r2, r3, #7
 80023e8:	4967      	ldr	r1, [pc, #412]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f0:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e133      	b.n	800266a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d049      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a5b      	ldr	r2, [pc, #364]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 8002420:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002424:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4a55      	ldr	r2, [pc, #340]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 8002438:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800243c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d024      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b80      	cmp	r3, #128	; 0x80
 800244c:	d020      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b90      	cmp	r3, #144	; 0x90
 8002454:	d01c      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2ba0      	cmp	r3, #160	; 0xa0
 800245c:	d018      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2bb0      	cmp	r3, #176	; 0xb0
 8002464:	d014      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2bc0      	cmp	r3, #192	; 0xc0
 800246c:	d010      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2bd0      	cmp	r3, #208	; 0xd0
 8002474:	d00c      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2be0      	cmp	r3, #224	; 0xe0
 800247c:	d008      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2bf0      	cmp	r3, #240	; 0xf0
 8002484:	d004      	beq.n	8002490 <HAL_RCC_ClockConfig+0x128>
 8002486:	f240 315f 	movw	r1, #863	; 0x35f
 800248a:	483e      	ldr	r0, [pc, #248]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 800248c:	f7fe fc5b 	bl	8000d46 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b3e      	ldr	r3, [pc, #248]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	493b      	ldr	r1, [pc, #236]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d051      	beq.n	8002552 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x168>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d008      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x168>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d004      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x168>
 80024c6:	f240 3166 	movw	r1, #870	; 0x366
 80024ca:	482e      	ldr	r0, [pc, #184]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80024cc:	f7fe fc3b 	bl	8000d46 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d8:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d115      	bne.n	8002510 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0c0      	b.n	800266a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f0:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b4      	b.n	800266a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0ac      	b.n	800266a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	491b      	ldr	r1, [pc, #108]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002522:	f7fe ffb7 	bl	8001494 <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002528:	e00a      	b.n	8002540 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252a:	f7fe ffb3 	bl	8001494 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e094      	b.n	800266a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 020c 	and.w	r2, r3, #12
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	429a      	cmp	r2, r3
 8002550:	d1eb      	bne.n	800252a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d217      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 0207 	bic.w	r2, r3, #7
 8002568:	4907      	ldr	r1, [pc, #28]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d008      	beq.n	8002590 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e073      	b.n	800266a <HAL_RCC_ClockConfig+0x302>
 8002582:	bf00      	nop
 8002584:	08004568 	.word	0x08004568
 8002588:	40022000 	.word	0x40022000
 800258c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d025      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d018      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x26e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d013      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x26e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80025b6:	d00e      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x26e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x26e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025ca:	d004      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x26e>
 80025cc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80025d0:	4828      	ldr	r0, [pc, #160]	; (8002674 <HAL_RCC_ClockConfig+0x30c>)
 80025d2:	f7fe fbb8 	bl	8000d46 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d6:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_RCC_ClockConfig+0x310>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4925      	ldr	r1, [pc, #148]	; (8002678 <HAL_RCC_ClockConfig+0x310>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d026      	beq.n	8002642 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d018      	beq.n	800262e <HAL_RCC_ClockConfig+0x2c6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d013      	beq.n	800262e <HAL_RCC_ClockConfig+0x2c6>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800260e:	d00e      	beq.n	800262e <HAL_RCC_ClockConfig+0x2c6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x2c6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002622:	d004      	beq.n	800262e <HAL_RCC_ClockConfig+0x2c6>
 8002624:	f240 31ab 	movw	r1, #939	; 0x3ab
 8002628:	4812      	ldr	r0, [pc, #72]	; (8002674 <HAL_RCC_ClockConfig+0x30c>)
 800262a:	f7fe fb8c 	bl	8000d46 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x310>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x310>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4601      	mov	r1, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x310>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x314>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	fa21 f303 	lsr.w	r3, r1, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x318>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x31c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fed4 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	08004568 	.word	0x08004568
 8002678:	40021000 	.word	0x40021000
 800267c:	08004664 	.word	0x08004664
 8002680:	20000000 	.word	0x20000000
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b490      	push	{r4, r7}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800268e:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002690:	1d3c      	adds	r4, r7, #4
 8002692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_RCC_GetSysClockFreq+0xb4>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x40>
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x46>
 80026c6:	e02d      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ca:	623b      	str	r3, [r7, #32]
      break;
 80026cc:	e02d      	b.n	800272a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	0c9b      	lsrs	r3, r3, #18
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026da:	4413      	add	r3, r2
 80026dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0c5b      	lsrs	r3, r3, #17
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026fa:	4413      	add	r3, r2
 80026fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002700:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002706:	fb02 f203 	mul.w	r2, r2, r3
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
 8002712:	e004      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	623b      	str	r3, [r7, #32]
      break;
 8002722:	e002      	b.n	800272a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002726:	623b      	str	r3, [r7, #32]
      break;
 8002728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272a:	6a3b      	ldr	r3, [r7, #32]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3728      	adds	r7, #40	; 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bc90      	pop	{r4, r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	080045a0 	.word	0x080045a0
 800273c:	080045b0 	.word	0x080045b0
 8002740:	40021000 	.word	0x40021000
 8002744:	007a1200 	.word	0x007a1200
 8002748:	003d0900 	.word	0x003d0900

0800274c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b02      	ldr	r3, [pc, #8]	; (800275c <HAL_RCC_GetHCLKFreq+0x10>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff2 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002768:	4601      	mov	r1, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4a03      	ldr	r2, [pc, #12]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	08004674 	.word	0x08004674

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffde 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002790:	4601      	mov	r1, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	0adb      	lsrs	r3, r3, #11
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4a03      	ldr	r2, [pc, #12]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08004674 	.word	0x08004674

080027b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <RCC_Delay+0x34>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <RCC_Delay+0x38>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0a5b      	lsrs	r3, r3, #9
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027cc:	bf00      	nop
  }
  while (Delay --);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e5a      	subs	r2, r3, #1
 80027d2:	60fa      	str	r2, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f9      	bne.n	80027cc <RCC_Delay+0x1c>
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000
 80027e8:	10624dd3 	.word	0x10624dd3

080027ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06f      	b.n	80028de <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a39      	ldr	r2, [pc, #228]	; (80028e8 <HAL_TIM_Base_Init+0xfc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_TIM_Base_Init+0x44>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d00e      	beq.n	8002830 <HAL_TIM_Base_Init+0x44>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a35      	ldr	r2, [pc, #212]	; (80028ec <HAL_TIM_Base_Init+0x100>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_TIM_Base_Init+0x44>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a33      	ldr	r2, [pc, #204]	; (80028f0 <HAL_TIM_Base_Init+0x104>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_TIM_Base_Init+0x44>
 8002826:	f44f 7189 	mov.w	r1, #274	; 0x112
 800282a:	4832      	ldr	r0, [pc, #200]	; (80028f4 <HAL_TIM_Base_Init+0x108>)
 800282c:	f7fe fa8b 	bl	8000d46 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d014      	beq.n	8002862 <HAL_TIM_Base_Init+0x76>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b10      	cmp	r3, #16
 800283e:	d010      	beq.n	8002862 <HAL_TIM_Base_Init+0x76>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b20      	cmp	r3, #32
 8002846:	d00c      	beq.n	8002862 <HAL_TIM_Base_Init+0x76>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d008      	beq.n	8002862 <HAL_TIM_Base_Init+0x76>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b60      	cmp	r3, #96	; 0x60
 8002856:	d004      	beq.n	8002862 <HAL_TIM_Base_Init+0x76>
 8002858:	f240 1113 	movw	r1, #275	; 0x113
 800285c:	4825      	ldr	r0, [pc, #148]	; (80028f4 <HAL_TIM_Base_Init+0x108>)
 800285e:	f7fe fa72 	bl	8000d46 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00e      	beq.n	8002888 <HAL_TIM_Base_Init+0x9c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002872:	d009      	beq.n	8002888 <HAL_TIM_Base_Init+0x9c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800287c:	d004      	beq.n	8002888 <HAL_TIM_Base_Init+0x9c>
 800287e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002882:	481c      	ldr	r0, [pc, #112]	; (80028f4 <HAL_TIM_Base_Init+0x108>)
 8002884:	f7fe fa5f 	bl	8000d46 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_TIM_Base_Init+0xb6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d004      	beq.n	80028a2 <HAL_TIM_Base_Init+0xb6>
 8002898:	f240 1115 	movw	r1, #277	; 0x115
 800289c:	4815      	ldr	r0, [pc, #84]	; (80028f4 <HAL_TIM_Base_Init+0x108>)
 800289e:	f7fe fa52 	bl	8000d46 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe fbdc 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 fc14 	bl	80030fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	080045b4 	.word	0x080045b4

080028f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <HAL_TIM_Base_Start_IT+0x78>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_TIM_Base_Start_IT+0x3a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d00e      	beq.n	8002932 <HAL_TIM_Base_Start_IT+0x3a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_TIM_Base_Start_IT+0x7c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_TIM_Base_Start_IT+0x3a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_TIM_Base_Start_IT+0x80>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_TIM_Base_Start_IT+0x3a>
 8002928:	f240 11b9 	movw	r1, #441	; 0x1b9
 800292c:	4813      	ldr	r0, [pc, #76]	; (800297c <HAL_TIM_Base_Start_IT+0x84>)
 800292e:	f7fe fa0a 	bl	8000d46 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b06      	cmp	r3, #6
 8002952:	d007      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x6c>
  {
    __HAL_TIM_ENABLE(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40000400 	.word	0x40000400
 8002978:	40000800 	.word	0x40000800
 800297c:	080045b4 	.word	0x080045b4

08002980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d122      	bne.n	80029dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0202 	mvn.w	r2, #2
 80029ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fb7f 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fb72 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fb81 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0204 	mvn.w	r2, #4
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2202      	movs	r2, #2
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fb55 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fb48 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fb57 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d122      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d11b      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0208 	mvn.w	r2, #8
 8002a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fb2b 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fb1e 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fb2d 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d122      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0210 	mvn.w	r2, #16
 8002aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2208      	movs	r2, #8
 8002aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fb01 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002ac4:	e005      	b.n	8002ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 faf4 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb03 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0201 	mvn.w	r2, #1
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fd fd6a 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	2b80      	cmp	r3, #128	; 0x80
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1c:	2b80      	cmp	r3, #128	; 0x80
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fc7d 	bl	800342a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d10e      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d107      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fac7 	bl	80030ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d10e      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d107      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0220 	mvn.w	r2, #32
 8002b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fc48 	bl	8003418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_TIM_ConfigClockSource+0x18>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e279      	b.n	800309c <HAL_TIM_ConfigClockSource+0x50c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc0:	d029      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bca:	d024      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d020      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d01c      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d018      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d014      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d010      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b50      	cmp	r3, #80	; 0x50
 8002bfa:	d00c      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d008      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b70      	cmp	r3, #112	; 0x70
 8002c0a:	d004      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x86>
 8002c0c:	f241 118a 	movw	r1, #4490	; 0x118a
 8002c10:	4896      	ldr	r0, [pc, #600]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002c12:	f7fe f898 	bl	8000d46 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c24:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	f000 81b6 	beq.w	8002fac <HAL_TIM_ConfigClockSource+0x41c>
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d80f      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0xd4>
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	f000 81fd 	beq.w	8003044 <HAL_TIM_ConfigClockSource+0x4b4>
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d803      	bhi.n	8002c56 <HAL_TIM_ConfigClockSource+0xc6>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 81f8 	beq.w	8003044 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c54:	e219      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f000 81f4 	beq.w	8003044 <HAL_TIM_ConfigClockSource+0x4b4>
 8002c5c:	2b30      	cmp	r3, #48	; 0x30
 8002c5e:	f000 81f1 	beq.w	8003044 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 8002c62:	e212      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d02e      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x136>
 8002c68:	2b70      	cmp	r3, #112	; 0x70
 8002c6a:	d806      	bhi.n	8002c7a <HAL_TIM_ConfigClockSource+0xea>
 8002c6c:	2b50      	cmp	r3, #80	; 0x50
 8002c6e:	f000 8105 	beq.w	8002e7c <HAL_TIM_ConfigClockSource+0x2ec>
 8002c72:	2b60      	cmp	r3, #96	; 0x60
 8002c74:	f000 814e 	beq.w	8002f14 <HAL_TIM_ConfigClockSource+0x384>
      break;
 8002c78:	e207      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0xfa>
 8002c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c84:	f000 808a 	beq.w	8002d9c <HAL_TIM_ConfigClockSource+0x20c>
      break;
 8002c88:	e1ff      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a78      	ldr	r2, [pc, #480]	; (8002e70 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	f000 81f9 	beq.w	8003088 <HAL_TIM_ConfigClockSource+0x4f8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	f000 81f3 	beq.w	8003088 <HAL_TIM_ConfigClockSource+0x4f8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a73      	ldr	r2, [pc, #460]	; (8002e74 <HAL_TIM_ConfigClockSource+0x2e4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	f000 81ed 	beq.w	8003088 <HAL_TIM_ConfigClockSource+0x4f8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a71      	ldr	r2, [pc, #452]	; (8002e78 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	f000 81e7 	beq.w	8003088 <HAL_TIM_ConfigClockSource+0x4f8>
 8002cba:	f241 1196 	movw	r1, #4502	; 0x1196
 8002cbe:	486b      	ldr	r0, [pc, #428]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002cc0:	f7fe f841 	bl	8000d46 <assert_failed>
      break;
 8002cc4:	e1e0      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <HAL_TIM_ConfigClockSource+0x2e4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a63      	ldr	r2, [pc, #396]	; (8002e78 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002cee:	f241 119d 	movw	r1, #4509	; 0x119d
 8002cf2:	485e      	ldr	r0, [pc, #376]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002cf4:	f7fe f827 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x198>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d08:	d00e      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x198>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d12:	d009      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x198>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x198>
 8002d1e:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 8002d22:	4852      	ldr	r0, [pc, #328]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002d24:	f7fe f80f 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d30:	d014      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x1cc>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x1cc>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00c      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x1cc>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d008      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x1cc>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b0a      	cmp	r3, #10
 8002d50:	d004      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x1cc>
 8002d52:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8002d56:	4845      	ldr	r0, [pc, #276]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002d58:	f7fd fff5 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d904      	bls.n	8002d6e <HAL_TIM_ConfigClockSource+0x1de>
 8002d64:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8002d68:	4840      	ldr	r0, [pc, #256]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002d6a:	f7fd ffec 	bl	8000d46 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f000 fa96 	bl	80032ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	609a      	str	r2, [r3, #8]
      break;
 8002d9a:	e176      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a33      	ldr	r2, [pc, #204]	; (8002e70 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x23e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dae:	d00e      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x23e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2f      	ldr	r2, [pc, #188]	; (8002e74 <HAL_TIM_ConfigClockSource+0x2e4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x23e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2e      	ldr	r2, [pc, #184]	; (8002e78 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x23e>
 8002dc4:	f241 11b5 	movw	r1, #4533	; 0x11b5
 8002dc8:	4828      	ldr	r0, [pc, #160]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002dca:	f7fd ffbc 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d013      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x26e>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dde:	d00e      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x26e>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de8:	d009      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x26e>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002df2:	d004      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x26e>
 8002df4:	f241 11b8 	movw	r1, #4536	; 0x11b8
 8002df8:	481c      	ldr	r0, [pc, #112]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002dfa:	f7fd ffa4 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e06:	d014      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x2a2>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x2a2>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x2a2>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d008      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x2a2>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b0a      	cmp	r3, #10
 8002e26:	d004      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x2a2>
 8002e28:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8002e2c:	480f      	ldr	r0, [pc, #60]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002e2e:	f7fd ff8a 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	d904      	bls.n	8002e44 <HAL_TIM_ConfigClockSource+0x2b4>
 8002e3a:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8002e3e:	480b      	ldr	r0, [pc, #44]	; (8002e6c <HAL_TIM_ConfigClockSource+0x2dc>)
 8002e40:	f7fd ff81 	bl	8000d46 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6899      	ldr	r1, [r3, #8]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f000 fa2b 	bl	80032ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e66:	609a      	str	r2, [r3, #8]
      break;
 8002e68:	e10f      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
 8002e6a:	bf00      	nop
 8002e6c:	080045b4 	.word	0x080045b4
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a88      	ldr	r2, [pc, #544]	; (80030a4 <HAL_TIM_ConfigClockSource+0x514>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x31e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d00e      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x31e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a84      	ldr	r2, [pc, #528]	; (80030a8 <HAL_TIM_ConfigClockSource+0x518>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x31e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a83      	ldr	r2, [pc, #524]	; (80030ac <HAL_TIM_ConfigClockSource+0x51c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x31e>
 8002ea4:	f241 11c9 	movw	r1, #4553	; 0x11c9
 8002ea8:	4881      	ldr	r0, [pc, #516]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8002eaa:	f7fd ff4c 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d014      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x352>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x352>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x352>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d008      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x352>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b0a      	cmp	r3, #10
 8002ed6:	d004      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x352>
 8002ed8:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8002edc:	4874      	ldr	r0, [pc, #464]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8002ede:	f7fd ff32 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	d904      	bls.n	8002ef4 <HAL_TIM_ConfigClockSource+0x364>
 8002eea:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8002eee:	4870      	ldr	r0, [pc, #448]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8002ef0:	f7fd ff29 	bl	8000d46 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f000 f95d 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2150      	movs	r1, #80	; 0x50
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f9b4 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002f12:	e0ba      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a62      	ldr	r2, [pc, #392]	; (80030a4 <HAL_TIM_ConfigClockSource+0x514>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x3b6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d00e      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x3b6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <HAL_TIM_ConfigClockSource+0x518>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x3b6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a5d      	ldr	r2, [pc, #372]	; (80030ac <HAL_TIM_ConfigClockSource+0x51c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x3b6>
 8002f3c:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8002f40:	485b      	ldr	r0, [pc, #364]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8002f42:	f7fd ff00 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4e:	d014      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x3ea>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x3ea>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00c      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x3ea>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d008      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x3ea>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b0a      	cmp	r3, #10
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x3ea>
 8002f70:	f241 11dc 	movw	r1, #4572	; 0x11dc
 8002f74:	484e      	ldr	r0, [pc, #312]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8002f76:	f7fd fee6 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	d904      	bls.n	8002f8c <HAL_TIM_ConfigClockSource+0x3fc>
 8002f82:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8002f86:	484a      	ldr	r0, [pc, #296]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8002f88:	f7fd fedd 	bl	8000d46 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f000 f93f 	bl	800321c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2160      	movs	r1, #96	; 0x60
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f968 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002faa:	e06e      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <HAL_TIM_ConfigClockSource+0x514>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x44e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d00e      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x44e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a38      	ldr	r2, [pc, #224]	; (80030a8 <HAL_TIM_ConfigClockSource+0x518>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x44e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a37      	ldr	r2, [pc, #220]	; (80030ac <HAL_TIM_ConfigClockSource+0x51c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x44e>
 8002fd4:	f241 11e9 	movw	r1, #4585	; 0x11e9
 8002fd8:	4835      	ldr	r0, [pc, #212]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8002fda:	f7fd feb4 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe6:	d014      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x482>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x482>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00c      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x482>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d008      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x482>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b0a      	cmp	r3, #10
 8003006:	d004      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x482>
 8003008:	f241 11ec 	movw	r1, #4588	; 0x11ec
 800300c:	4828      	ldr	r0, [pc, #160]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 800300e:	f7fd fe9a 	bl	8000d46 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	d904      	bls.n	8003024 <HAL_TIM_ConfigClockSource+0x494>
 800301a:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800301e:	4824      	ldr	r0, [pc, #144]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8003020:	f7fd fe91 	bl	8000d46 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	461a      	mov	r2, r3
 8003032:	f000 f8c5 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2140      	movs	r1, #64	; 0x40
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f91c 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003042:	e022      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <HAL_TIM_ConfigClockSource+0x514>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x4e6>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003056:	d00e      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x4e6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_TIM_ConfigClockSource+0x518>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x4e6>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a11      	ldr	r2, [pc, #68]	; (80030ac <HAL_TIM_ConfigClockSource+0x51c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x4e6>
 800306c:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8003070:	480f      	ldr	r0, [pc, #60]	; (80030b0 <HAL_TIM_ConfigClockSource+0x520>)
 8003072:	f7fd fe68 	bl	8000d46 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f000 f8fa 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003086:	e000      	b.n	800308a <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 8003088:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40000800 	.word	0x40000800
 80030b0:	080045b4 	.word	0x080045b4

080030b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <TIM_Base_SetConfig+0xb8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00b      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d007      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a26      	ldr	r2, [pc, #152]	; (80031b8 <TIM_Base_SetConfig+0xbc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a25      	ldr	r2, [pc, #148]	; (80031bc <TIM_Base_SetConfig+0xc0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <TIM_Base_SetConfig+0xb8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d007      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <TIM_Base_SetConfig+0xbc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <TIM_Base_SetConfig+0xc0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <TIM_Base_SetConfig+0xb8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d103      	bne.n	80031a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	615a      	str	r2, [r3, #20]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 030a 	bic.w	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f023 0210 	bic.w	r2, r3, #16
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	031b      	lsls	r3, r3, #12
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 0307 	orr.w	r3, r3, #7
 800329c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	609a      	str	r2, [r3, #8]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a43      	ldr	r2, [pc, #268]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d00e      	beq.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3f      	ldr	r2, [pc, #252]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800331e:	f240 6164 	movw	r1, #1636	; 0x664
 8003322:	483c      	ldr	r0, [pc, #240]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003324:	f7fd fd0f 	bl	8000d46 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b10      	cmp	r3, #16
 8003336:	d01c      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b20      	cmp	r3, #32
 800333e:	d018      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b30      	cmp	r3, #48	; 0x30
 8003346:	d014      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d010      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b50      	cmp	r3, #80	; 0x50
 8003356:	d00c      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b60      	cmp	r3, #96	; 0x60
 800335e:	d008      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b70      	cmp	r3, #112	; 0x70
 8003366:	d004      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003368:	f240 6165 	movw	r1, #1637	; 0x665
 800336c:	4829      	ldr	r0, [pc, #164]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800336e:	f7fd fcea 	bl	8000d46 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b80      	cmp	r3, #128	; 0x80
 8003378:	d008      	beq.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003382:	f240 6166 	movw	r1, #1638	; 0x666
 8003386:	4823      	ldr	r0, [pc, #140]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003388:	f7fd fcdd 	bl	8000d46 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003396:	2302      	movs	r3, #2
 8003398:	e032      	b.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	080045ec 	.word	0x080045ec

08003418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e092      	b.n	8003574 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02c      	beq.n	80034b0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a48      	ldr	r2, [pc, #288]	; (800357c <HAL_UART_Init+0x140>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_UART_Init+0x42>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a46      	ldr	r2, [pc, #280]	; (8003580 <HAL_UART_Init+0x144>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_UART_Init+0x42>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a45      	ldr	r2, [pc, #276]	; (8003584 <HAL_UART_Init+0x148>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_UART_Init+0x42>
 8003474:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003478:	4843      	ldr	r0, [pc, #268]	; (8003588 <HAL_UART_Init+0x14c>)
 800347a:	f7fd fc64 	bl	8000d46 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d028      	beq.n	80034d8 <HAL_UART_Init+0x9c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348e:	d023      	beq.n	80034d8 <HAL_UART_Init+0x9c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	d01e      	beq.n	80034d8 <HAL_UART_Init+0x9c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034a2:	d019      	beq.n	80034d8 <HAL_UART_Init+0x9c>
 80034a4:	f240 1147 	movw	r1, #327	; 0x147
 80034a8:	4837      	ldr	r0, [pc, #220]	; (8003588 <HAL_UART_Init+0x14c>)
 80034aa:	f7fd fc4c 	bl	8000d46 <assert_failed>
 80034ae:	e013      	b.n	80034d8 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_UART_Init+0x140>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <HAL_UART_Init+0x9c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a30      	ldr	r2, [pc, #192]	; (8003580 <HAL_UART_Init+0x144>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_UART_Init+0x9c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_UART_Init+0x148>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_UART_Init+0x9c>
 80034ce:	f240 114b 	movw	r1, #331	; 0x14b
 80034d2:	482d      	ldr	r0, [pc, #180]	; (8003588 <HAL_UART_Init+0x14c>)
 80034d4:	f7fd fc37 	bl	8000d46 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_UART_Init+0xb8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e8:	d004      	beq.n	80034f4 <HAL_UART_Init+0xb8>
 80034ea:	f240 114d 	movw	r1, #333	; 0x14d
 80034ee:	4826      	ldr	r0, [pc, #152]	; (8003588 <HAL_UART_Init+0x14c>)
 80034f0:	f7fd fc29 	bl	8000d46 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d106      	bne.n	800350e <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7fd fe2d 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2224      	movs	r2, #36	; 0x24
 8003512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003524:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f914 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800355a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40013800 	.word	0x40013800
 8003580:	40004400 	.word	0x40004400
 8003584:	40004800 	.word	0x40004800
 8003588:	08004628 	.word	0x08004628

0800358c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	f040 8083 	bne.w	80036b4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_UART_Transmit+0x2e>
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07b      	b.n	80036b6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_UART_Transmit+0x40>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e074      	b.n	80036b6 <HAL_UART_Transmit+0x12a>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2221      	movs	r2, #33	; 0x21
 80035de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035e2:	f7fd ff57 	bl	8001494 <HAL_GetTick>
 80035e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035f4:	e042      	b.n	800367c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d122      	bne.n	8003654 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f850 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e046      	b.n	80036b6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800363a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3302      	adds	r3, #2
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	e017      	b.n	800367c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	3301      	adds	r3, #1
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	e013      	b.n	800367c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2200      	movs	r2, #0
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f82d 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e023      	b.n	80036b6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	60ba      	str	r2, [r7, #8]
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1b7      	bne.n	80035f6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	2140      	movs	r1, #64	; 0x40
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f814 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e00a      	b.n	80036b6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e000      	b.n	80036b6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	e02c      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d028      	beq.n	800372a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0x30>
 80036de:	f7fd fed9 	bl	8001494 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d21d      	bcs.n	800372a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e00f      	b.n	800374a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	429a      	cmp	r2, r3
 8003746:	d0c3      	beq.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a84      	ldr	r2, [pc, #528]	; (8003974 <UART_SetConfig+0x220>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d904      	bls.n	8003770 <UART_SetConfig+0x1c>
 8003766:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800376a:	4883      	ldr	r0, [pc, #524]	; (8003978 <UART_SetConfig+0x224>)
 800376c:	f7fd faeb 	bl	8000d46 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <UART_SetConfig+0x38>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003780:	d004      	beq.n	800378c <UART_SetConfig+0x38>
 8003782:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8003786:	487c      	ldr	r0, [pc, #496]	; (8003978 <UART_SetConfig+0x224>)
 8003788:	f7fd fadd 	bl	8000d46 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <UART_SetConfig+0x5e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379c:	d009      	beq.n	80037b2 <UART_SetConfig+0x5e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037a6:	d004      	beq.n	80037b2 <UART_SetConfig+0x5e>
 80037a8:	f640 31ff 	movw	r1, #3071	; 0xbff
 80037ac:	4872      	ldr	r0, [pc, #456]	; (8003978 <UART_SetConfig+0x224>)
 80037ae:	f7fd faca 	bl	8000d46 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <UART_SetConfig+0x74>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <UART_SetConfig+0x7e>
 80037c8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80037cc:	486a      	ldr	r0, [pc, #424]	; (8003978 <UART_SetConfig+0x224>)
 80037ce:	f7fd faba 	bl	8000d46 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003804:	f023 030c 	bic.w	r3, r3, #12
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	68f9      	ldr	r1, [r7, #12]
 800380e:	430b      	orrs	r3, r1
 8003810:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699a      	ldr	r2, [r3, #24]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a53      	ldr	r2, [pc, #332]	; (800397c <UART_SetConfig+0x228>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d14e      	bne.n	80038d0 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003832:	f7fe ffa9 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8003836:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009a      	lsls	r2, r3, #2
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	4a4c      	ldr	r2, [pc, #304]	; (8003980 <UART_SetConfig+0x22c>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	0119      	lsls	r1, r3, #4
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009a      	lsls	r2, r3, #2
 8003862:	441a      	add	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	fbb2 f2f3 	udiv	r2, r2, r3
 800386e:	4b44      	ldr	r3, [pc, #272]	; (8003980 <UART_SetConfig+0x22c>)
 8003870:	fba3 0302 	umull	r0, r3, r3, r2
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	2064      	movs	r0, #100	; 0x64
 8003878:	fb00 f303 	mul.w	r3, r0, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	3332      	adds	r3, #50	; 0x32
 8003882:	4a3f      	ldr	r2, [pc, #252]	; (8003980 <UART_SetConfig+0x22c>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388e:	4419      	add	r1, r3
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009a      	lsls	r2, r3, #2
 800389a:	441a      	add	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <UART_SetConfig+0x22c>)
 80038a8:	fba3 0302 	umull	r0, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	2064      	movs	r0, #100	; 0x64
 80038b0:	fb00 f303 	mul.w	r3, r0, r3
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	3332      	adds	r3, #50	; 0x32
 80038ba:	4a31      	ldr	r2, [pc, #196]	; (8003980 <UART_SetConfig+0x22c>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	440a      	add	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80038ce:	e04d      	b.n	800396c <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 80038d0:	f7fe ff46 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80038d4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	4a24      	ldr	r2, [pc, #144]	; (8003980 <UART_SetConfig+0x22c>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	0119      	lsls	r1, r3, #4
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fbb2 f2f3 	udiv	r2, r2, r3
 800390c:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <UART_SetConfig+0x22c>)
 800390e:	fba3 0302 	umull	r0, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	fb00 f303 	mul.w	r3, r0, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a17      	ldr	r2, [pc, #92]	; (8003980 <UART_SetConfig+0x22c>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392c:	4419      	add	r1, r3
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f2f3 	udiv	r2, r2, r3
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <UART_SetConfig+0x22c>)
 8003946:	fba3 0302 	umull	r0, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2064      	movs	r0, #100	; 0x64
 800394e:	fb00 f303 	mul.w	r3, r0, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a09      	ldr	r2, [pc, #36]	; (8003980 <UART_SetConfig+0x22c>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	440a      	add	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	0044aa20 	.word	0x0044aa20
 8003978:	08004628 	.word	0x08004628
 800397c:	40013800 	.word	0x40013800
 8003980:	51eb851f 	.word	0x51eb851f

08003984 <__errno>:
 8003984:	4b01      	ldr	r3, [pc, #4]	; (800398c <__errno+0x8>)
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	2000000c 	.word	0x2000000c

08003990 <__libc_init_array>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	2500      	movs	r5, #0
 8003994:	4e0c      	ldr	r6, [pc, #48]	; (80039c8 <__libc_init_array+0x38>)
 8003996:	4c0d      	ldr	r4, [pc, #52]	; (80039cc <__libc_init_array+0x3c>)
 8003998:	1ba4      	subs	r4, r4, r6
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	42a5      	cmp	r5, r4
 800399e:	d109      	bne.n	80039b4 <__libc_init_array+0x24>
 80039a0:	f000 fc70 	bl	8004284 <_init>
 80039a4:	2500      	movs	r5, #0
 80039a6:	4e0a      	ldr	r6, [pc, #40]	; (80039d0 <__libc_init_array+0x40>)
 80039a8:	4c0a      	ldr	r4, [pc, #40]	; (80039d4 <__libc_init_array+0x44>)
 80039aa:	1ba4      	subs	r4, r4, r6
 80039ac:	10a4      	asrs	r4, r4, #2
 80039ae:	42a5      	cmp	r5, r4
 80039b0:	d105      	bne.n	80039be <__libc_init_array+0x2e>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039b8:	4798      	blx	r3
 80039ba:	3501      	adds	r5, #1
 80039bc:	e7ee      	b.n	800399c <__libc_init_array+0xc>
 80039be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039c2:	4798      	blx	r3
 80039c4:	3501      	adds	r5, #1
 80039c6:	e7f2      	b.n	80039ae <__libc_init_array+0x1e>
 80039c8:	080046b0 	.word	0x080046b0
 80039cc:	080046b0 	.word	0x080046b0
 80039d0:	080046b0 	.word	0x080046b0
 80039d4:	080046b4 	.word	0x080046b4

080039d8 <memset>:
 80039d8:	4603      	mov	r3, r0
 80039da:	4402      	add	r2, r0
 80039dc:	4293      	cmp	r3, r2
 80039de:	d100      	bne.n	80039e2 <memset+0xa>
 80039e0:	4770      	bx	lr
 80039e2:	f803 1b01 	strb.w	r1, [r3], #1
 80039e6:	e7f9      	b.n	80039dc <memset+0x4>

080039e8 <sniprintf>:
 80039e8:	b40c      	push	{r2, r3}
 80039ea:	b530      	push	{r4, r5, lr}
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <sniprintf+0x64>)
 80039ee:	1e0c      	subs	r4, r1, #0
 80039f0:	b09d      	sub	sp, #116	; 0x74
 80039f2:	681d      	ldr	r5, [r3, #0]
 80039f4:	da08      	bge.n	8003a08 <sniprintf+0x20>
 80039f6:	238b      	movs	r3, #139	; 0x8b
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	602b      	str	r3, [r5, #0]
 80039fe:	b01d      	add	sp, #116	; 0x74
 8003a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a04:	b002      	add	sp, #8
 8003a06:	4770      	bx	lr
 8003a08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a10:	bf0c      	ite	eq
 8003a12:	4623      	moveq	r3, r4
 8003a14:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a18:	9304      	str	r3, [sp, #16]
 8003a1a:	9307      	str	r3, [sp, #28]
 8003a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a20:	9002      	str	r0, [sp, #8]
 8003a22:	9006      	str	r0, [sp, #24]
 8003a24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a2a:	ab21      	add	r3, sp, #132	; 0x84
 8003a2c:	a902      	add	r1, sp, #8
 8003a2e:	4628      	mov	r0, r5
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	f000 f88f 	bl	8003b54 <_svfiprintf_r>
 8003a36:	1c43      	adds	r3, r0, #1
 8003a38:	bfbc      	itt	lt
 8003a3a:	238b      	movlt	r3, #139	; 0x8b
 8003a3c:	602b      	strlt	r3, [r5, #0]
 8003a3e:	2c00      	cmp	r4, #0
 8003a40:	d0dd      	beq.n	80039fe <sniprintf+0x16>
 8003a42:	2200      	movs	r2, #0
 8003a44:	9b02      	ldr	r3, [sp, #8]
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e7d9      	b.n	80039fe <sniprintf+0x16>
 8003a4a:	bf00      	nop
 8003a4c:	2000000c 	.word	0x2000000c

08003a50 <strchr>:
 8003a50:	b2c9      	uxtb	r1, r1
 8003a52:	4603      	mov	r3, r0
 8003a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a58:	b11a      	cbz	r2, 8003a62 <strchr+0x12>
 8003a5a:	428a      	cmp	r2, r1
 8003a5c:	d1f9      	bne.n	8003a52 <strchr+0x2>
 8003a5e:	4618      	mov	r0, r3
 8003a60:	4770      	bx	lr
 8003a62:	2900      	cmp	r1, #0
 8003a64:	bf18      	it	ne
 8003a66:	2300      	movne	r3, #0
 8003a68:	e7f9      	b.n	8003a5e <strchr+0xe>

08003a6a <strstr>:
 8003a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6c:	7803      	ldrb	r3, [r0, #0]
 8003a6e:	b17b      	cbz	r3, 8003a90 <strstr+0x26>
 8003a70:	4604      	mov	r4, r0
 8003a72:	7823      	ldrb	r3, [r4, #0]
 8003a74:	4620      	mov	r0, r4
 8003a76:	1c66      	adds	r6, r4, #1
 8003a78:	b17b      	cbz	r3, 8003a9a <strstr+0x30>
 8003a7a:	1e4a      	subs	r2, r1, #1
 8003a7c:	1e63      	subs	r3, r4, #1
 8003a7e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003a82:	b14d      	cbz	r5, 8003a98 <strstr+0x2e>
 8003a84:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003a88:	4634      	mov	r4, r6
 8003a8a:	42af      	cmp	r7, r5
 8003a8c:	d0f7      	beq.n	8003a7e <strstr+0x14>
 8003a8e:	e7f0      	b.n	8003a72 <strstr+0x8>
 8003a90:	780b      	ldrb	r3, [r1, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf18      	it	ne
 8003a96:	2000      	movne	r0, #0
 8003a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	e7fc      	b.n	8003a98 <strstr+0x2e>

08003a9e <__ssputs_r>:
 8003a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa2:	688e      	ldr	r6, [r1, #8]
 8003aa4:	4682      	mov	sl, r0
 8003aa6:	429e      	cmp	r6, r3
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	4690      	mov	r8, r2
 8003aac:	4699      	mov	r9, r3
 8003aae:	d837      	bhi.n	8003b20 <__ssputs_r+0x82>
 8003ab0:	898a      	ldrh	r2, [r1, #12]
 8003ab2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ab6:	d031      	beq.n	8003b1c <__ssputs_r+0x7e>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	6909      	ldr	r1, [r1, #16]
 8003abe:	1a6f      	subs	r7, r5, r1
 8003ac0:	6965      	ldr	r5, [r4, #20]
 8003ac2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ac6:	fb95 f5f3 	sdiv	r5, r5, r3
 8003aca:	f109 0301 	add.w	r3, r9, #1
 8003ace:	443b      	add	r3, r7
 8003ad0:	429d      	cmp	r5, r3
 8003ad2:	bf38      	it	cc
 8003ad4:	461d      	movcc	r5, r3
 8003ad6:	0553      	lsls	r3, r2, #21
 8003ad8:	d530      	bpl.n	8003b3c <__ssputs_r+0x9e>
 8003ada:	4629      	mov	r1, r5
 8003adc:	f000 fb38 	bl	8004150 <_malloc_r>
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	b950      	cbnz	r0, 8003afa <__ssputs_r+0x5c>
 8003ae4:	230c      	movs	r3, #12
 8003ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aea:	f8ca 3000 	str.w	r3, [sl]
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af4:	81a3      	strh	r3, [r4, #12]
 8003af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afa:	463a      	mov	r2, r7
 8003afc:	6921      	ldr	r1, [r4, #16]
 8003afe:	f000 fab7 	bl	8004070 <memcpy>
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	6126      	str	r6, [r4, #16]
 8003b10:	443e      	add	r6, r7
 8003b12:	6026      	str	r6, [r4, #0]
 8003b14:	464e      	mov	r6, r9
 8003b16:	6165      	str	r5, [r4, #20]
 8003b18:	1bed      	subs	r5, r5, r7
 8003b1a:	60a5      	str	r5, [r4, #8]
 8003b1c:	454e      	cmp	r6, r9
 8003b1e:	d900      	bls.n	8003b22 <__ssputs_r+0x84>
 8003b20:	464e      	mov	r6, r9
 8003b22:	4632      	mov	r2, r6
 8003b24:	4641      	mov	r1, r8
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	f000 faad 	bl	8004086 <memmove>
 8003b2c:	68a3      	ldr	r3, [r4, #8]
 8003b2e:	2000      	movs	r0, #0
 8003b30:	1b9b      	subs	r3, r3, r6
 8003b32:	60a3      	str	r3, [r4, #8]
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	441e      	add	r6, r3
 8003b38:	6026      	str	r6, [r4, #0]
 8003b3a:	e7dc      	b.n	8003af6 <__ssputs_r+0x58>
 8003b3c:	462a      	mov	r2, r5
 8003b3e:	f000 fb61 	bl	8004204 <_realloc_r>
 8003b42:	4606      	mov	r6, r0
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d1e2      	bne.n	8003b0e <__ssputs_r+0x70>
 8003b48:	6921      	ldr	r1, [r4, #16]
 8003b4a:	4650      	mov	r0, sl
 8003b4c:	f000 fab4 	bl	80040b8 <_free_r>
 8003b50:	e7c8      	b.n	8003ae4 <__ssputs_r+0x46>
	...

08003b54 <_svfiprintf_r>:
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b58:	461d      	mov	r5, r3
 8003b5a:	898b      	ldrh	r3, [r1, #12]
 8003b5c:	b09d      	sub	sp, #116	; 0x74
 8003b5e:	061f      	lsls	r7, r3, #24
 8003b60:	4680      	mov	r8, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	4616      	mov	r6, r2
 8003b66:	d50f      	bpl.n	8003b88 <_svfiprintf_r+0x34>
 8003b68:	690b      	ldr	r3, [r1, #16]
 8003b6a:	b96b      	cbnz	r3, 8003b88 <_svfiprintf_r+0x34>
 8003b6c:	2140      	movs	r1, #64	; 0x40
 8003b6e:	f000 faef 	bl	8004150 <_malloc_r>
 8003b72:	6020      	str	r0, [r4, #0]
 8003b74:	6120      	str	r0, [r4, #16]
 8003b76:	b928      	cbnz	r0, 8003b84 <_svfiprintf_r+0x30>
 8003b78:	230c      	movs	r3, #12
 8003b7a:	f8c8 3000 	str.w	r3, [r8]
 8003b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b82:	e0c8      	b.n	8003d16 <_svfiprintf_r+0x1c2>
 8003b84:	2340      	movs	r3, #64	; 0x40
 8003b86:	6163      	str	r3, [r4, #20]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b92:	2330      	movs	r3, #48	; 0x30
 8003b94:	f04f 0b01 	mov.w	fp, #1
 8003b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b9c:	9503      	str	r5, [sp, #12]
 8003b9e:	4637      	mov	r7, r6
 8003ba0:	463d      	mov	r5, r7
 8003ba2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ba6:	b10b      	cbz	r3, 8003bac <_svfiprintf_r+0x58>
 8003ba8:	2b25      	cmp	r3, #37	; 0x25
 8003baa:	d13e      	bne.n	8003c2a <_svfiprintf_r+0xd6>
 8003bac:	ebb7 0a06 	subs.w	sl, r7, r6
 8003bb0:	d00b      	beq.n	8003bca <_svfiprintf_r+0x76>
 8003bb2:	4653      	mov	r3, sl
 8003bb4:	4632      	mov	r2, r6
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	4640      	mov	r0, r8
 8003bba:	f7ff ff70 	bl	8003a9e <__ssputs_r>
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	f000 80a4 	beq.w	8003d0c <_svfiprintf_r+0x1b8>
 8003bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc6:	4453      	add	r3, sl
 8003bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bca:	783b      	ldrb	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 809d 	beq.w	8003d0c <_svfiprintf_r+0x1b8>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bdc:	9304      	str	r3, [sp, #16]
 8003bde:	9307      	str	r3, [sp, #28]
 8003be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003be4:	931a      	str	r3, [sp, #104]	; 0x68
 8003be6:	462f      	mov	r7, r5
 8003be8:	2205      	movs	r2, #5
 8003bea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003bee:	4850      	ldr	r0, [pc, #320]	; (8003d30 <_svfiprintf_r+0x1dc>)
 8003bf0:	f000 fa30 	bl	8004054 <memchr>
 8003bf4:	9b04      	ldr	r3, [sp, #16]
 8003bf6:	b9d0      	cbnz	r0, 8003c2e <_svfiprintf_r+0xda>
 8003bf8:	06d9      	lsls	r1, r3, #27
 8003bfa:	bf44      	itt	mi
 8003bfc:	2220      	movmi	r2, #32
 8003bfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c02:	071a      	lsls	r2, r3, #28
 8003c04:	bf44      	itt	mi
 8003c06:	222b      	movmi	r2, #43	; 0x2b
 8003c08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c0c:	782a      	ldrb	r2, [r5, #0]
 8003c0e:	2a2a      	cmp	r2, #42	; 0x2a
 8003c10:	d015      	beq.n	8003c3e <_svfiprintf_r+0xea>
 8003c12:	462f      	mov	r7, r5
 8003c14:	2000      	movs	r0, #0
 8003c16:	250a      	movs	r5, #10
 8003c18:	9a07      	ldr	r2, [sp, #28]
 8003c1a:	4639      	mov	r1, r7
 8003c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c20:	3b30      	subs	r3, #48	; 0x30
 8003c22:	2b09      	cmp	r3, #9
 8003c24:	d94d      	bls.n	8003cc2 <_svfiprintf_r+0x16e>
 8003c26:	b1b8      	cbz	r0, 8003c58 <_svfiprintf_r+0x104>
 8003c28:	e00f      	b.n	8003c4a <_svfiprintf_r+0xf6>
 8003c2a:	462f      	mov	r7, r5
 8003c2c:	e7b8      	b.n	8003ba0 <_svfiprintf_r+0x4c>
 8003c2e:	4a40      	ldr	r2, [pc, #256]	; (8003d30 <_svfiprintf_r+0x1dc>)
 8003c30:	463d      	mov	r5, r7
 8003c32:	1a80      	subs	r0, r0, r2
 8003c34:	fa0b f000 	lsl.w	r0, fp, r0
 8003c38:	4318      	orrs	r0, r3
 8003c3a:	9004      	str	r0, [sp, #16]
 8003c3c:	e7d3      	b.n	8003be6 <_svfiprintf_r+0x92>
 8003c3e:	9a03      	ldr	r2, [sp, #12]
 8003c40:	1d11      	adds	r1, r2, #4
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	9103      	str	r1, [sp, #12]
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	db01      	blt.n	8003c4e <_svfiprintf_r+0xfa>
 8003c4a:	9207      	str	r2, [sp, #28]
 8003c4c:	e004      	b.n	8003c58 <_svfiprintf_r+0x104>
 8003c4e:	4252      	negs	r2, r2
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	9207      	str	r2, [sp, #28]
 8003c56:	9304      	str	r3, [sp, #16]
 8003c58:	783b      	ldrb	r3, [r7, #0]
 8003c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c5c:	d10c      	bne.n	8003c78 <_svfiprintf_r+0x124>
 8003c5e:	787b      	ldrb	r3, [r7, #1]
 8003c60:	2b2a      	cmp	r3, #42	; 0x2a
 8003c62:	d133      	bne.n	8003ccc <_svfiprintf_r+0x178>
 8003c64:	9b03      	ldr	r3, [sp, #12]
 8003c66:	3702      	adds	r7, #2
 8003c68:	1d1a      	adds	r2, r3, #4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	9203      	str	r2, [sp, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bfb8      	it	lt
 8003c72:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c76:	9305      	str	r3, [sp, #20]
 8003c78:	4d2e      	ldr	r5, [pc, #184]	; (8003d34 <_svfiprintf_r+0x1e0>)
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	7839      	ldrb	r1, [r7, #0]
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f000 f9e8 	bl	8004054 <memchr>
 8003c84:	b138      	cbz	r0, 8003c96 <_svfiprintf_r+0x142>
 8003c86:	2340      	movs	r3, #64	; 0x40
 8003c88:	1b40      	subs	r0, r0, r5
 8003c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c8e:	9b04      	ldr	r3, [sp, #16]
 8003c90:	3701      	adds	r7, #1
 8003c92:	4303      	orrs	r3, r0
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	7839      	ldrb	r1, [r7, #0]
 8003c98:	2206      	movs	r2, #6
 8003c9a:	4827      	ldr	r0, [pc, #156]	; (8003d38 <_svfiprintf_r+0x1e4>)
 8003c9c:	1c7e      	adds	r6, r7, #1
 8003c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ca2:	f000 f9d7 	bl	8004054 <memchr>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d038      	beq.n	8003d1c <_svfiprintf_r+0x1c8>
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <_svfiprintf_r+0x1e8>)
 8003cac:	bb13      	cbnz	r3, 8003cf4 <_svfiprintf_r+0x1a0>
 8003cae:	9b03      	ldr	r3, [sp, #12]
 8003cb0:	3307      	adds	r3, #7
 8003cb2:	f023 0307 	bic.w	r3, r3, #7
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	9303      	str	r3, [sp, #12]
 8003cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cbc:	444b      	add	r3, r9
 8003cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc0:	e76d      	b.n	8003b9e <_svfiprintf_r+0x4a>
 8003cc2:	fb05 3202 	mla	r2, r5, r2, r3
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	460f      	mov	r7, r1
 8003cca:	e7a6      	b.n	8003c1a <_svfiprintf_r+0xc6>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	250a      	movs	r5, #10
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	3701      	adds	r7, #1
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cdc:	3a30      	subs	r2, #48	; 0x30
 8003cde:	2a09      	cmp	r2, #9
 8003ce0:	d903      	bls.n	8003cea <_svfiprintf_r+0x196>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0c8      	beq.n	8003c78 <_svfiprintf_r+0x124>
 8003ce6:	9105      	str	r1, [sp, #20]
 8003ce8:	e7c6      	b.n	8003c78 <_svfiprintf_r+0x124>
 8003cea:	fb05 2101 	mla	r1, r5, r1, r2
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	e7f0      	b.n	8003cd6 <_svfiprintf_r+0x182>
 8003cf4:	ab03      	add	r3, sp, #12
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <_svfiprintf_r+0x1ec>)
 8003cfc:	a904      	add	r1, sp, #16
 8003cfe:	4640      	mov	r0, r8
 8003d00:	f3af 8000 	nop.w
 8003d04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d08:	4681      	mov	r9, r0
 8003d0a:	d1d6      	bne.n	8003cba <_svfiprintf_r+0x166>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	065b      	lsls	r3, r3, #25
 8003d10:	f53f af35 	bmi.w	8003b7e <_svfiprintf_r+0x2a>
 8003d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d16:	b01d      	add	sp, #116	; 0x74
 8003d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1c:	ab03      	add	r3, sp, #12
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4622      	mov	r2, r4
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <_svfiprintf_r+0x1ec>)
 8003d24:	a904      	add	r1, sp, #16
 8003d26:	4640      	mov	r0, r8
 8003d28:	f000 f882 	bl	8003e30 <_printf_i>
 8003d2c:	e7ea      	b.n	8003d04 <_svfiprintf_r+0x1b0>
 8003d2e:	bf00      	nop
 8003d30:	0800467c 	.word	0x0800467c
 8003d34:	08004682 	.word	0x08004682
 8003d38:	08004686 	.word	0x08004686
 8003d3c:	00000000 	.word	0x00000000
 8003d40:	08003a9f 	.word	0x08003a9f

08003d44 <_printf_common>:
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	4691      	mov	r9, r2
 8003d4a:	461f      	mov	r7, r3
 8003d4c:	688a      	ldr	r2, [r1, #8]
 8003d4e:	690b      	ldr	r3, [r1, #16]
 8003d50:	4606      	mov	r6, r0
 8003d52:	4293      	cmp	r3, r2
 8003d54:	bfb8      	it	lt
 8003d56:	4613      	movlt	r3, r2
 8003d58:	f8c9 3000 	str.w	r3, [r9]
 8003d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d60:	460c      	mov	r4, r1
 8003d62:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d66:	b112      	cbz	r2, 8003d6e <_printf_common+0x2a>
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f8c9 3000 	str.w	r3, [r9]
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	0699      	lsls	r1, r3, #26
 8003d72:	bf42      	ittt	mi
 8003d74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d78:	3302      	addmi	r3, #2
 8003d7a:	f8c9 3000 	strmi.w	r3, [r9]
 8003d7e:	6825      	ldr	r5, [r4, #0]
 8003d80:	f015 0506 	ands.w	r5, r5, #6
 8003d84:	d107      	bne.n	8003d96 <_printf_common+0x52>
 8003d86:	f104 0a19 	add.w	sl, r4, #25
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	42ab      	cmp	r3, r5
 8003d94:	dc29      	bgt.n	8003dea <_printf_common+0xa6>
 8003d96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	3300      	adds	r3, #0
 8003d9e:	bf18      	it	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	0692      	lsls	r2, r2, #26
 8003da4:	d42e      	bmi.n	8003e04 <_printf_common+0xc0>
 8003da6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003daa:	4639      	mov	r1, r7
 8003dac:	4630      	mov	r0, r6
 8003dae:	47c0      	blx	r8
 8003db0:	3001      	adds	r0, #1
 8003db2:	d021      	beq.n	8003df8 <_printf_common+0xb4>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	68e5      	ldr	r5, [r4, #12]
 8003db8:	f003 0306 	and.w	r3, r3, #6
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	bf18      	it	ne
 8003dc0:	2500      	movne	r5, #0
 8003dc2:	f8d9 2000 	ldr.w	r2, [r9]
 8003dc6:	f04f 0900 	mov.w	r9, #0
 8003dca:	bf08      	it	eq
 8003dcc:	1aad      	subeq	r5, r5, r2
 8003dce:	68a3      	ldr	r3, [r4, #8]
 8003dd0:	6922      	ldr	r2, [r4, #16]
 8003dd2:	bf08      	it	eq
 8003dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bfc4      	itt	gt
 8003ddc:	1a9b      	subgt	r3, r3, r2
 8003dde:	18ed      	addgt	r5, r5, r3
 8003de0:	341a      	adds	r4, #26
 8003de2:	454d      	cmp	r5, r9
 8003de4:	d11a      	bne.n	8003e1c <_printf_common+0xd8>
 8003de6:	2000      	movs	r0, #0
 8003de8:	e008      	b.n	8003dfc <_printf_common+0xb8>
 8003dea:	2301      	movs	r3, #1
 8003dec:	4652      	mov	r2, sl
 8003dee:	4639      	mov	r1, r7
 8003df0:	4630      	mov	r0, r6
 8003df2:	47c0      	blx	r8
 8003df4:	3001      	adds	r0, #1
 8003df6:	d103      	bne.n	8003e00 <_printf_common+0xbc>
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e00:	3501      	adds	r5, #1
 8003e02:	e7c2      	b.n	8003d8a <_printf_common+0x46>
 8003e04:	2030      	movs	r0, #48	; 0x30
 8003e06:	18e1      	adds	r1, r4, r3
 8003e08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e12:	4422      	add	r2, r4
 8003e14:	3302      	adds	r3, #2
 8003e16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e1a:	e7c4      	b.n	8003da6 <_printf_common+0x62>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4622      	mov	r2, r4
 8003e20:	4639      	mov	r1, r7
 8003e22:	4630      	mov	r0, r6
 8003e24:	47c0      	blx	r8
 8003e26:	3001      	adds	r0, #1
 8003e28:	d0e6      	beq.n	8003df8 <_printf_common+0xb4>
 8003e2a:	f109 0901 	add.w	r9, r9, #1
 8003e2e:	e7d8      	b.n	8003de2 <_printf_common+0x9e>

08003e30 <_printf_i>:
 8003e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e38:	460c      	mov	r4, r1
 8003e3a:	7e09      	ldrb	r1, [r1, #24]
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	296e      	cmp	r1, #110	; 0x6e
 8003e40:	4617      	mov	r7, r2
 8003e42:	4606      	mov	r6, r0
 8003e44:	4698      	mov	r8, r3
 8003e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e48:	f000 80b3 	beq.w	8003fb2 <_printf_i+0x182>
 8003e4c:	d822      	bhi.n	8003e94 <_printf_i+0x64>
 8003e4e:	2963      	cmp	r1, #99	; 0x63
 8003e50:	d036      	beq.n	8003ec0 <_printf_i+0x90>
 8003e52:	d80a      	bhi.n	8003e6a <_printf_i+0x3a>
 8003e54:	2900      	cmp	r1, #0
 8003e56:	f000 80b9 	beq.w	8003fcc <_printf_i+0x19c>
 8003e5a:	2958      	cmp	r1, #88	; 0x58
 8003e5c:	f000 8083 	beq.w	8003f66 <_printf_i+0x136>
 8003e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e68:	e032      	b.n	8003ed0 <_printf_i+0xa0>
 8003e6a:	2964      	cmp	r1, #100	; 0x64
 8003e6c:	d001      	beq.n	8003e72 <_printf_i+0x42>
 8003e6e:	2969      	cmp	r1, #105	; 0x69
 8003e70:	d1f6      	bne.n	8003e60 <_printf_i+0x30>
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	0605      	lsls	r5, r0, #24
 8003e78:	f103 0104 	add.w	r1, r3, #4
 8003e7c:	d52a      	bpl.n	8003ed4 <_printf_i+0xa4>
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6011      	str	r1, [r2, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da03      	bge.n	8003e8e <_printf_i+0x5e>
 8003e86:	222d      	movs	r2, #45	; 0x2d
 8003e88:	425b      	negs	r3, r3
 8003e8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e8e:	486f      	ldr	r0, [pc, #444]	; (800404c <_printf_i+0x21c>)
 8003e90:	220a      	movs	r2, #10
 8003e92:	e039      	b.n	8003f08 <_printf_i+0xd8>
 8003e94:	2973      	cmp	r1, #115	; 0x73
 8003e96:	f000 809d 	beq.w	8003fd4 <_printf_i+0x1a4>
 8003e9a:	d808      	bhi.n	8003eae <_printf_i+0x7e>
 8003e9c:	296f      	cmp	r1, #111	; 0x6f
 8003e9e:	d020      	beq.n	8003ee2 <_printf_i+0xb2>
 8003ea0:	2970      	cmp	r1, #112	; 0x70
 8003ea2:	d1dd      	bne.n	8003e60 <_printf_i+0x30>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f043 0320 	orr.w	r3, r3, #32
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	e003      	b.n	8003eb6 <_printf_i+0x86>
 8003eae:	2975      	cmp	r1, #117	; 0x75
 8003eb0:	d017      	beq.n	8003ee2 <_printf_i+0xb2>
 8003eb2:	2978      	cmp	r1, #120	; 0x78
 8003eb4:	d1d4      	bne.n	8003e60 <_printf_i+0x30>
 8003eb6:	2378      	movs	r3, #120	; 0x78
 8003eb8:	4865      	ldr	r0, [pc, #404]	; (8004050 <_printf_i+0x220>)
 8003eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ebe:	e055      	b.n	8003f6c <_printf_i+0x13c>
 8003ec0:	6813      	ldr	r3, [r2, #0]
 8003ec2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec6:	1d19      	adds	r1, r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6011      	str	r1, [r2, #0]
 8003ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e08c      	b.n	8003fee <_printf_i+0x1be>
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003eda:	6011      	str	r1, [r2, #0]
 8003edc:	bf18      	it	ne
 8003ede:	b21b      	sxthne	r3, r3
 8003ee0:	e7cf      	b.n	8003e82 <_printf_i+0x52>
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	1d18      	adds	r0, r3, #4
 8003ee8:	6010      	str	r0, [r2, #0]
 8003eea:	0628      	lsls	r0, r5, #24
 8003eec:	d501      	bpl.n	8003ef2 <_printf_i+0xc2>
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	e002      	b.n	8003ef8 <_printf_i+0xc8>
 8003ef2:	0668      	lsls	r0, r5, #25
 8003ef4:	d5fb      	bpl.n	8003eee <_printf_i+0xbe>
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	296f      	cmp	r1, #111	; 0x6f
 8003efa:	bf14      	ite	ne
 8003efc:	220a      	movne	r2, #10
 8003efe:	2208      	moveq	r2, #8
 8003f00:	4852      	ldr	r0, [pc, #328]	; (800404c <_printf_i+0x21c>)
 8003f02:	2100      	movs	r1, #0
 8003f04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f08:	6865      	ldr	r5, [r4, #4]
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	60a5      	str	r5, [r4, #8]
 8003f0e:	f2c0 8095 	blt.w	800403c <_printf_i+0x20c>
 8003f12:	6821      	ldr	r1, [r4, #0]
 8003f14:	f021 0104 	bic.w	r1, r1, #4
 8003f18:	6021      	str	r1, [r4, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d13d      	bne.n	8003f9a <_printf_i+0x16a>
 8003f1e:	2d00      	cmp	r5, #0
 8003f20:	f040 808e 	bne.w	8004040 <_printf_i+0x210>
 8003f24:	4665      	mov	r5, ip
 8003f26:	2a08      	cmp	r2, #8
 8003f28:	d10b      	bne.n	8003f42 <_printf_i+0x112>
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	07db      	lsls	r3, r3, #31
 8003f2e:	d508      	bpl.n	8003f42 <_printf_i+0x112>
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	6862      	ldr	r2, [r4, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	bfde      	ittt	le
 8003f38:	2330      	movle	r3, #48	; 0x30
 8003f3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f42:	ebac 0305 	sub.w	r3, ip, r5
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	f8cd 8000 	str.w	r8, [sp]
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	aa03      	add	r2, sp, #12
 8003f50:	4621      	mov	r1, r4
 8003f52:	4630      	mov	r0, r6
 8003f54:	f7ff fef6 	bl	8003d44 <_printf_common>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d14d      	bne.n	8003ff8 <_printf_i+0x1c8>
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f60:	b005      	add	sp, #20
 8003f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f66:	4839      	ldr	r0, [pc, #228]	; (800404c <_printf_i+0x21c>)
 8003f68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	6821      	ldr	r1, [r4, #0]
 8003f70:	1d1d      	adds	r5, r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6015      	str	r5, [r2, #0]
 8003f76:	060a      	lsls	r2, r1, #24
 8003f78:	d50b      	bpl.n	8003f92 <_printf_i+0x162>
 8003f7a:	07ca      	lsls	r2, r1, #31
 8003f7c:	bf44      	itt	mi
 8003f7e:	f041 0120 	orrmi.w	r1, r1, #32
 8003f82:	6021      	strmi	r1, [r4, #0]
 8003f84:	b91b      	cbnz	r3, 8003f8e <_printf_i+0x15e>
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	f022 0220 	bic.w	r2, r2, #32
 8003f8c:	6022      	str	r2, [r4, #0]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	e7b7      	b.n	8003f02 <_printf_i+0xd2>
 8003f92:	064d      	lsls	r5, r1, #25
 8003f94:	bf48      	it	mi
 8003f96:	b29b      	uxthmi	r3, r3
 8003f98:	e7ef      	b.n	8003f7a <_printf_i+0x14a>
 8003f9a:	4665      	mov	r5, ip
 8003f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fa0:	fb02 3311 	mls	r3, r2, r1, r3
 8003fa4:	5cc3      	ldrb	r3, [r0, r3]
 8003fa6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003faa:	460b      	mov	r3, r1
 8003fac:	2900      	cmp	r1, #0
 8003fae:	d1f5      	bne.n	8003f9c <_printf_i+0x16c>
 8003fb0:	e7b9      	b.n	8003f26 <_printf_i+0xf6>
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	6825      	ldr	r5, [r4, #0]
 8003fb6:	1d18      	adds	r0, r3, #4
 8003fb8:	6961      	ldr	r1, [r4, #20]
 8003fba:	6010      	str	r0, [r2, #0]
 8003fbc:	0628      	lsls	r0, r5, #24
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	d501      	bpl.n	8003fc6 <_printf_i+0x196>
 8003fc2:	6019      	str	r1, [r3, #0]
 8003fc4:	e002      	b.n	8003fcc <_printf_i+0x19c>
 8003fc6:	066a      	lsls	r2, r5, #25
 8003fc8:	d5fb      	bpl.n	8003fc2 <_printf_i+0x192>
 8003fca:	8019      	strh	r1, [r3, #0]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4665      	mov	r5, ip
 8003fd0:	6123      	str	r3, [r4, #16]
 8003fd2:	e7b9      	b.n	8003f48 <_printf_i+0x118>
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	1d19      	adds	r1, r3, #4
 8003fd8:	6011      	str	r1, [r2, #0]
 8003fda:	681d      	ldr	r5, [r3, #0]
 8003fdc:	6862      	ldr	r2, [r4, #4]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f837 	bl	8004054 <memchr>
 8003fe6:	b108      	cbz	r0, 8003fec <_printf_i+0x1bc>
 8003fe8:	1b40      	subs	r0, r0, r5
 8003fea:	6060      	str	r0, [r4, #4]
 8003fec:	6863      	ldr	r3, [r4, #4]
 8003fee:	6123      	str	r3, [r4, #16]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff6:	e7a7      	b.n	8003f48 <_printf_i+0x118>
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	4630      	mov	r0, r6
 8004000:	47c0      	blx	r8
 8004002:	3001      	adds	r0, #1
 8004004:	d0aa      	beq.n	8003f5c <_printf_i+0x12c>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	079b      	lsls	r3, r3, #30
 800400a:	d413      	bmi.n	8004034 <_printf_i+0x204>
 800400c:	68e0      	ldr	r0, [r4, #12]
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	4298      	cmp	r0, r3
 8004012:	bfb8      	it	lt
 8004014:	4618      	movlt	r0, r3
 8004016:	e7a3      	b.n	8003f60 <_printf_i+0x130>
 8004018:	2301      	movs	r3, #1
 800401a:	464a      	mov	r2, r9
 800401c:	4639      	mov	r1, r7
 800401e:	4630      	mov	r0, r6
 8004020:	47c0      	blx	r8
 8004022:	3001      	adds	r0, #1
 8004024:	d09a      	beq.n	8003f5c <_printf_i+0x12c>
 8004026:	3501      	adds	r5, #1
 8004028:	68e3      	ldr	r3, [r4, #12]
 800402a:	9a03      	ldr	r2, [sp, #12]
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	42ab      	cmp	r3, r5
 8004030:	dcf2      	bgt.n	8004018 <_printf_i+0x1e8>
 8004032:	e7eb      	b.n	800400c <_printf_i+0x1dc>
 8004034:	2500      	movs	r5, #0
 8004036:	f104 0919 	add.w	r9, r4, #25
 800403a:	e7f5      	b.n	8004028 <_printf_i+0x1f8>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ac      	bne.n	8003f9a <_printf_i+0x16a>
 8004040:	7803      	ldrb	r3, [r0, #0]
 8004042:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404a:	e76c      	b.n	8003f26 <_printf_i+0xf6>
 800404c:	0800468d 	.word	0x0800468d
 8004050:	0800469e 	.word	0x0800469e

08004054 <memchr>:
 8004054:	b510      	push	{r4, lr}
 8004056:	b2c9      	uxtb	r1, r1
 8004058:	4402      	add	r2, r0
 800405a:	4290      	cmp	r0, r2
 800405c:	4603      	mov	r3, r0
 800405e:	d101      	bne.n	8004064 <memchr+0x10>
 8004060:	2300      	movs	r3, #0
 8004062:	e003      	b.n	800406c <memchr+0x18>
 8004064:	781c      	ldrb	r4, [r3, #0]
 8004066:	3001      	adds	r0, #1
 8004068:	428c      	cmp	r4, r1
 800406a:	d1f6      	bne.n	800405a <memchr+0x6>
 800406c:	4618      	mov	r0, r3
 800406e:	bd10      	pop	{r4, pc}

08004070 <memcpy>:
 8004070:	b510      	push	{r4, lr}
 8004072:	1e43      	subs	r3, r0, #1
 8004074:	440a      	add	r2, r1
 8004076:	4291      	cmp	r1, r2
 8004078:	d100      	bne.n	800407c <memcpy+0xc>
 800407a:	bd10      	pop	{r4, pc}
 800407c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004084:	e7f7      	b.n	8004076 <memcpy+0x6>

08004086 <memmove>:
 8004086:	4288      	cmp	r0, r1
 8004088:	b510      	push	{r4, lr}
 800408a:	eb01 0302 	add.w	r3, r1, r2
 800408e:	d807      	bhi.n	80040a0 <memmove+0x1a>
 8004090:	1e42      	subs	r2, r0, #1
 8004092:	4299      	cmp	r1, r3
 8004094:	d00a      	beq.n	80040ac <memmove+0x26>
 8004096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800409a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800409e:	e7f8      	b.n	8004092 <memmove+0xc>
 80040a0:	4283      	cmp	r3, r0
 80040a2:	d9f5      	bls.n	8004090 <memmove+0xa>
 80040a4:	1881      	adds	r1, r0, r2
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	42d3      	cmn	r3, r2
 80040aa:	d100      	bne.n	80040ae <memmove+0x28>
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80040b6:	e7f7      	b.n	80040a8 <memmove+0x22>

080040b8 <_free_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4605      	mov	r5, r0
 80040bc:	2900      	cmp	r1, #0
 80040be:	d043      	beq.n	8004148 <_free_r+0x90>
 80040c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c4:	1f0c      	subs	r4, r1, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bfb8      	it	lt
 80040ca:	18e4      	addlt	r4, r4, r3
 80040cc:	f000 f8d0 	bl	8004270 <__malloc_lock>
 80040d0:	4a1e      	ldr	r2, [pc, #120]	; (800414c <_free_r+0x94>)
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	4610      	mov	r0, r2
 80040d6:	b933      	cbnz	r3, 80040e6 <_free_r+0x2e>
 80040d8:	6063      	str	r3, [r4, #4]
 80040da:	6014      	str	r4, [r2, #0]
 80040dc:	4628      	mov	r0, r5
 80040de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e2:	f000 b8c6 	b.w	8004272 <__malloc_unlock>
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	d90b      	bls.n	8004102 <_free_r+0x4a>
 80040ea:	6821      	ldr	r1, [r4, #0]
 80040ec:	1862      	adds	r2, r4, r1
 80040ee:	4293      	cmp	r3, r2
 80040f0:	bf01      	itttt	eq
 80040f2:	681a      	ldreq	r2, [r3, #0]
 80040f4:	685b      	ldreq	r3, [r3, #4]
 80040f6:	1852      	addeq	r2, r2, r1
 80040f8:	6022      	streq	r2, [r4, #0]
 80040fa:	6063      	str	r3, [r4, #4]
 80040fc:	6004      	str	r4, [r0, #0]
 80040fe:	e7ed      	b.n	80040dc <_free_r+0x24>
 8004100:	4613      	mov	r3, r2
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	b10a      	cbz	r2, 800410a <_free_r+0x52>
 8004106:	42a2      	cmp	r2, r4
 8004108:	d9fa      	bls.n	8004100 <_free_r+0x48>
 800410a:	6819      	ldr	r1, [r3, #0]
 800410c:	1858      	adds	r0, r3, r1
 800410e:	42a0      	cmp	r0, r4
 8004110:	d10b      	bne.n	800412a <_free_r+0x72>
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	4401      	add	r1, r0
 8004116:	1858      	adds	r0, r3, r1
 8004118:	4282      	cmp	r2, r0
 800411a:	6019      	str	r1, [r3, #0]
 800411c:	d1de      	bne.n	80040dc <_free_r+0x24>
 800411e:	6810      	ldr	r0, [r2, #0]
 8004120:	6852      	ldr	r2, [r2, #4]
 8004122:	4401      	add	r1, r0
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	e7d8      	b.n	80040dc <_free_r+0x24>
 800412a:	d902      	bls.n	8004132 <_free_r+0x7a>
 800412c:	230c      	movs	r3, #12
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	e7d4      	b.n	80040dc <_free_r+0x24>
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	1821      	adds	r1, r4, r0
 8004136:	428a      	cmp	r2, r1
 8004138:	bf01      	itttt	eq
 800413a:	6811      	ldreq	r1, [r2, #0]
 800413c:	6852      	ldreq	r2, [r2, #4]
 800413e:	1809      	addeq	r1, r1, r0
 8004140:	6021      	streq	r1, [r4, #0]
 8004142:	6062      	str	r2, [r4, #4]
 8004144:	605c      	str	r4, [r3, #4]
 8004146:	e7c9      	b.n	80040dc <_free_r+0x24>
 8004148:	bd38      	pop	{r3, r4, r5, pc}
 800414a:	bf00      	nop
 800414c:	2000011c 	.word	0x2000011c

08004150 <_malloc_r>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	1ccd      	adds	r5, r1, #3
 8004154:	f025 0503 	bic.w	r5, r5, #3
 8004158:	3508      	adds	r5, #8
 800415a:	2d0c      	cmp	r5, #12
 800415c:	bf38      	it	cc
 800415e:	250c      	movcc	r5, #12
 8004160:	2d00      	cmp	r5, #0
 8004162:	4606      	mov	r6, r0
 8004164:	db01      	blt.n	800416a <_malloc_r+0x1a>
 8004166:	42a9      	cmp	r1, r5
 8004168:	d903      	bls.n	8004172 <_malloc_r+0x22>
 800416a:	230c      	movs	r3, #12
 800416c:	6033      	str	r3, [r6, #0]
 800416e:	2000      	movs	r0, #0
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	f000 f87d 	bl	8004270 <__malloc_lock>
 8004176:	4a21      	ldr	r2, [pc, #132]	; (80041fc <_malloc_r+0xac>)
 8004178:	6814      	ldr	r4, [r2, #0]
 800417a:	4621      	mov	r1, r4
 800417c:	b991      	cbnz	r1, 80041a4 <_malloc_r+0x54>
 800417e:	4c20      	ldr	r4, [pc, #128]	; (8004200 <_malloc_r+0xb0>)
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	b91b      	cbnz	r3, 800418c <_malloc_r+0x3c>
 8004184:	4630      	mov	r0, r6
 8004186:	f000 f863 	bl	8004250 <_sbrk_r>
 800418a:	6020      	str	r0, [r4, #0]
 800418c:	4629      	mov	r1, r5
 800418e:	4630      	mov	r0, r6
 8004190:	f000 f85e 	bl	8004250 <_sbrk_r>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d124      	bne.n	80041e2 <_malloc_r+0x92>
 8004198:	230c      	movs	r3, #12
 800419a:	4630      	mov	r0, r6
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	f000 f868 	bl	8004272 <__malloc_unlock>
 80041a2:	e7e4      	b.n	800416e <_malloc_r+0x1e>
 80041a4:	680b      	ldr	r3, [r1, #0]
 80041a6:	1b5b      	subs	r3, r3, r5
 80041a8:	d418      	bmi.n	80041dc <_malloc_r+0x8c>
 80041aa:	2b0b      	cmp	r3, #11
 80041ac:	d90f      	bls.n	80041ce <_malloc_r+0x7e>
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	18cc      	adds	r4, r1, r3
 80041b2:	50cd      	str	r5, [r1, r3]
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 f85c 	bl	8004272 <__malloc_unlock>
 80041ba:	f104 000b 	add.w	r0, r4, #11
 80041be:	1d23      	adds	r3, r4, #4
 80041c0:	f020 0007 	bic.w	r0, r0, #7
 80041c4:	1ac3      	subs	r3, r0, r3
 80041c6:	d0d3      	beq.n	8004170 <_malloc_r+0x20>
 80041c8:	425a      	negs	r2, r3
 80041ca:	50e2      	str	r2, [r4, r3]
 80041cc:	e7d0      	b.n	8004170 <_malloc_r+0x20>
 80041ce:	684b      	ldr	r3, [r1, #4]
 80041d0:	428c      	cmp	r4, r1
 80041d2:	bf16      	itet	ne
 80041d4:	6063      	strne	r3, [r4, #4]
 80041d6:	6013      	streq	r3, [r2, #0]
 80041d8:	460c      	movne	r4, r1
 80041da:	e7eb      	b.n	80041b4 <_malloc_r+0x64>
 80041dc:	460c      	mov	r4, r1
 80041de:	6849      	ldr	r1, [r1, #4]
 80041e0:	e7cc      	b.n	800417c <_malloc_r+0x2c>
 80041e2:	1cc4      	adds	r4, r0, #3
 80041e4:	f024 0403 	bic.w	r4, r4, #3
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d005      	beq.n	80041f8 <_malloc_r+0xa8>
 80041ec:	1a21      	subs	r1, r4, r0
 80041ee:	4630      	mov	r0, r6
 80041f0:	f000 f82e 	bl	8004250 <_sbrk_r>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d0cf      	beq.n	8004198 <_malloc_r+0x48>
 80041f8:	6025      	str	r5, [r4, #0]
 80041fa:	e7db      	b.n	80041b4 <_malloc_r+0x64>
 80041fc:	2000011c 	.word	0x2000011c
 8004200:	20000120 	.word	0x20000120

08004204 <_realloc_r>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	4607      	mov	r7, r0
 8004208:	4614      	mov	r4, r2
 800420a:	460e      	mov	r6, r1
 800420c:	b921      	cbnz	r1, 8004218 <_realloc_r+0x14>
 800420e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004212:	4611      	mov	r1, r2
 8004214:	f7ff bf9c 	b.w	8004150 <_malloc_r>
 8004218:	b922      	cbnz	r2, 8004224 <_realloc_r+0x20>
 800421a:	f7ff ff4d 	bl	80040b8 <_free_r>
 800421e:	4625      	mov	r5, r4
 8004220:	4628      	mov	r0, r5
 8004222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004224:	f000 f826 	bl	8004274 <_malloc_usable_size_r>
 8004228:	42a0      	cmp	r0, r4
 800422a:	d20f      	bcs.n	800424c <_realloc_r+0x48>
 800422c:	4621      	mov	r1, r4
 800422e:	4638      	mov	r0, r7
 8004230:	f7ff ff8e 	bl	8004150 <_malloc_r>
 8004234:	4605      	mov	r5, r0
 8004236:	2800      	cmp	r0, #0
 8004238:	d0f2      	beq.n	8004220 <_realloc_r+0x1c>
 800423a:	4631      	mov	r1, r6
 800423c:	4622      	mov	r2, r4
 800423e:	f7ff ff17 	bl	8004070 <memcpy>
 8004242:	4631      	mov	r1, r6
 8004244:	4638      	mov	r0, r7
 8004246:	f7ff ff37 	bl	80040b8 <_free_r>
 800424a:	e7e9      	b.n	8004220 <_realloc_r+0x1c>
 800424c:	4635      	mov	r5, r6
 800424e:	e7e7      	b.n	8004220 <_realloc_r+0x1c>

08004250 <_sbrk_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	2300      	movs	r3, #0
 8004254:	4c05      	ldr	r4, [pc, #20]	; (800426c <_sbrk_r+0x1c>)
 8004256:	4605      	mov	r5, r0
 8004258:	4608      	mov	r0, r1
 800425a:	6023      	str	r3, [r4, #0]
 800425c:	f7fc fe5c 	bl	8000f18 <_sbrk>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_sbrk_r+0x1a>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	b103      	cbz	r3, 800426a <_sbrk_r+0x1a>
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	200001e8 	.word	0x200001e8

08004270 <__malloc_lock>:
 8004270:	4770      	bx	lr

08004272 <__malloc_unlock>:
 8004272:	4770      	bx	lr

08004274 <_malloc_usable_size_r>:
 8004274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004278:	1f18      	subs	r0, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	bfbc      	itt	lt
 800427e:	580b      	ldrlt	r3, [r1, r0]
 8004280:	18c0      	addlt	r0, r0, r3
 8004282:	4770      	bx	lr

08004284 <_init>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr

08004290 <_fini>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr
